"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("./utils");

var _platformSdk = require("@serverless/platform-sdk");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var template, lambdaLogGroups, accessKey, _ref2, Account, destinationOpts, destinationArn, _ref3, lambdaLogGroupIndex, lambdaLogGroupKey;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(ctx.sls.service.custom && ctx.sls.service.custom.enterprise && ctx.sls.service.custom.enterprise.collectLambdaLogs === false)) {
              _context.next = 3;
              break;
            }

            ctx.sls.cli.log('Info: This plugin is not configured to collect AWS Lambda Logs.', 'Serverless Enterprise');
            return _context.abrupt("return");

          case 3:
            template = ctx.sls.service.provider.compiledCloudFormationTemplate; // Gather possible targets

            lambdaLogGroups = (0, _utils.pickResourceType)(template, 'AWS::Logs::LogGroup');

            if (!(lambdaLogGroups.length == 0)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return");

          case 7:
            _context.next = 9;
            return (0, _platformSdk.getAccessKeyForTenant)(ctx.sls.service.tenant);

          case 9:
            accessKey = _context.sent;
            _context.next = 12;
            return ctx.provider.request('STS', 'getCallerIdentity', {});

          case 12:
            _ref2 = _context.sent;
            Account = _ref2.Account;
            destinationOpts = {
              accessKey,
              appUid: ctx.sls.service.appUid,
              tenantUid: ctx.sls.service.tenantUid,
              serviceName: ctx.sls.service.getServiceName(),
              stageName: ctx.provider.getStage(),
              regionName: ctx.provider.getRegion(),
              accountId: Account
            };
            _context.prev = 15;
            ;
            _context.next = 19;
            return (0, _platformSdk.getLogDestination)(destinationOpts);

          case 19:
            _ref3 = _context.sent;
            destinationArn = _ref3.destinationArn;
            _context.next = 29;
            break;

          case 23:
            _context.prev = 23;
            _context.t0 = _context["catch"](15);

            if (!(_context.t0.message && _context.t0.message.includes('not supported in region'))) {
              _context.next = 28;
              break;
            }

            ctx.sls.cli.log(`Warning: Lambda log collection is not supported in ${ctx.provider.getRegion()}`);
            return _context.abrupt("return");

          case 28:
            throw new Error(_context.t0.message);

          case 29:
            // For each log group, set up subscription
            for (lambdaLogGroupIndex in lambdaLogGroups) {
              lambdaLogGroupKey = lambdaLogGroups[lambdaLogGroupIndex].key;
              template.Resources[`CloudWatchLogsSubscriptionFilter${(0, _utils.upperFirst)(lambdaLogGroupKey)}`] = {
                Type: 'AWS::Logs::SubscriptionFilter',
                Properties: {
                  DestinationArn: destinationArn,
                  FilterPattern: '?"REPORT RequestId: " ?"SERVERLESS_ENTERPRISE"',
                  LogGroupName: {
                    Ref: lambdaLogGroupKey
                  }
                }
              };
            }

          case 30:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[15, 23]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=awsLambdaLogsCollection.js.map