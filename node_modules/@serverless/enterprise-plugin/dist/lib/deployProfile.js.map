{"version":3,"sources":["../../src/lib/deployProfile.js"],"names":["configureDeployProfile","ctx","sls","service","tenant","accessKey","stage","provider","getStage","_","pick","deploymentProfile","providerCredentials","cachedCredentials","secretValue","region","getRegion","safeguards","safeguardsPolicies","fromPairs","secretValues","map","secretName","value","secretProperties"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;AAEO,IAAMA,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZ,wCAAsBA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAtC,CADY;;AAAA;AAC9BC,YAAAA,SAD8B;AAAA;AAAA,mBAEJ;AAC9BA,cAAAA,SAD8B;AAE9BC,cAAAA,KAAK,EAAEL,GAAG,CAACM,QAAJ,CAAaC,QAAb;AAFuB,eAG3BC,gBAAEC,IAAF,CAAOT,GAAG,CAACC,GAAJ,CAAQC,OAAf,EAAwB,CAAC,QAAD,EAAW,KAAX,EAAkB,SAAlB,CAAxB,CAH2B,EAFI;;AAAA;AAE9BQ,YAAAA,iBAF8B;;AAOpC,gBAAIA,iBAAiB,CAACC,mBAAtB,EAA2C;AACzCX,cAAAA,GAAG,CAACM,QAAJ,CAAaM,iBAAb,GAAiCF,iBAAiB,CAACC,mBAAlB,CAAsCE,WAAvE;AACAb,cAAAA,GAAG,CAACM,QAAJ,CAAaM,iBAAb,CAA+BE,MAA/B,GAAwCd,GAAG,CAACM,QAAJ,CAAaS,SAAb,EAAxC;AACD;;AACDf,YAAAA,GAAG,CAACgB,UAAJ,GAAiBN,iBAAiB,CAACO,kBAAnC;AACA,mDACEjB,GADF,EAEEQ,gBAAEU,SAAF,CACER,iBAAiB,CAACS,YAAlB,CAA+BC,GAA/B,CAAmC;AAAA,kBAAGC,UAAH,SAAGA,UAAH;AAAA,kBAAmCC,KAAnC,SAAeC,gBAAf,CAAmCD,KAAnC;AAAA,qBAAiD,CAClFD,UADkF,EAElFC,KAFkF,CAAjD;AAAA,aAAnC,CADF,CAFF,EAQElB,SARF;;AAZoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBL,sBAAsB;AAAA;AAAA;AAAA,GAA5B","sourcesContent":["import _ from 'lodash'\nimport { getAccessKeyForTenant, getDeployProfile } from '@serverless/platform-sdk'\nimport { hookIntoVariableGetter } from './variables'\n\nexport const configureDeployProfile = async (ctx) => {\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant)\n  const deploymentProfile = await getDeployProfile({\n    accessKey,\n    stage: ctx.provider.getStage(),\n    ..._.pick(ctx.sls.service, ['tenant', 'app', 'service'])\n  })\n  if (deploymentProfile.providerCredentials) {\n    ctx.provider.cachedCredentials = deploymentProfile.providerCredentials.secretValue\n    ctx.provider.cachedCredentials.region = ctx.provider.getRegion()\n  }\n  ctx.safeguards = deploymentProfile.safeguardsPolicies\n  hookIntoVariableGetter(\n    ctx,\n    _.fromPairs(\n      deploymentProfile.secretValues.map(({ secretName, secretProperties: { value } }) => [\n        secretName,\n        value\n      ])\n    ),\n    accessKey\n  )\n}\n"],"file":"deployProfile.js"}