"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));

var _errors = require("./errors");

var _objectSubsetEquals = _interopRequireDefault(require("./objectSubsetEquals"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var runTest =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(testSpec, path, method, baseApiUrl) {
    var body, headers, queryString, resp, respBody, json;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            headers = {};
            queryString = '';

            if (testSpec.request && testSpec.request.body) {
              if (typeof testSpec.request.body === 'string') {
                body = testSpec.request.body; // eslint-disable-line prefer-destructuring
              } else {
                body = JSON.stringify(testSpec.request.body);
                headers['Content-Type'] = 'application/json';
              }
            } else if (testSpec.request && testSpec.request.form) {
              queryString = (0, _lodash.entries)(testSpec.request.form).map(function (_ref2) {
                var _ref3 = _slicedToArray(_ref2, 2),
                    key = _ref3[0],
                    value = _ref3[1];

                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
              }).join('&');
            }

            if (testSpec.request && testSpec.request.headers) {
              Object.assign(headers, testSpec.request.headers);
            }

            _context.next = 6;
            return (0, _isomorphicFetch.default)(`${baseApiUrl}/${path}?${queryString}`, {
              method,
              body,
              headers
            });

          case 6:
            resp = _context.sent;
            _context.next = 9;
            return resp.text();

          case 9:
            respBody = _context.sent;

            if (!testSpec.response.headers) {
              _context.next = 13;
              break;
            }

            if ((0, _objectSubsetEquals.default)(testSpec.response.headers, resp.headers._headers)) {
              _context.next = 13;
              break;
            }

            throw new _errors.TestError('headers', testSpec.response.headers, resp.headers._headers, resp, respBody);

          case 13:
            if (!(testSpec.response === true && !resp.ok)) {
              _context.next = 17;
              break;
            }

            throw new _errors.TestError('status', 200, resp.status, resp, respBody);

          case 17:
            if (!testSpec.response) {
              _context.next = 29;
              break;
            }

            if (!(testSpec.response.status && resp.status !== testSpec.response.status)) {
              _context.next = 20;
              break;
            }

            throw new _errors.TestError('status', testSpec.response.status, resp.status, resp, respBody);

          case 20:
            if (!testSpec.response.body) {
              _context.next = 29;
              break;
            }

            if (!(typeof testSpec.response.body === 'string')) {
              _context.next = 26;
              break;
            }

            if (!(respBody !== testSpec.response.body)) {
              _context.next = 24;
              break;
            }

            throw new _errors.TestError('body', testSpec.response.body, respBody, resp, respBody);

          case 24:
            _context.next = 29;
            break;

          case 26:
            json = JSON.parse(respBody);

            if ((0, _objectSubsetEquals.default)(testSpec.response.body, json)) {
              _context.next = 29;
              break;
            }

            throw new _errors.TestError('body', testSpec.response.body, json, resp, respBody);

          case 29:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function runTest(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var _default = runTest;
exports.default = _default;
//# sourceMappingURL=runTest.js.map