{"version":3,"sources":["../../../src/lib/test/runTest.js"],"names":["runTest","testSpec","path","method","baseApiUrl","headers","queryString","request","body","JSON","stringify","form","map","key","value","encodeURIComponent","join","Object","assign","resp","text","respBody","response","_headers","TestError","ok","status","json","parse"],"mappings":"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","sourcesContent":["import { entries } from 'lodash'\nimport fetch from 'isomorphic-fetch'\nimport { TestError } from './errors'\nimport objectSubsetEquals from './objectSubsetEquals'\n\nconst runTest = async (testSpec, path, method, baseApiUrl) => {\n  let body\n  const headers = {}\n  let queryString = ''\n  if (testSpec.request && testSpec.request.body) {\n    if (typeof testSpec.request.body === 'string') {\n      body = testSpec.request.body // eslint-disable-line prefer-destructuring\n    } else {\n      body = JSON.stringify(testSpec.request.body)\n      headers['Content-Type'] = 'application/json'\n    }\n  } else if (testSpec.request && testSpec.request.form) {\n    queryString = entries(testSpec.request.form)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join('&')\n  }\n  if (testSpec.request && testSpec.request.headers) {\n    Object.assign(headers, testSpec.request.headers)\n  }\n  const resp = await fetch(`${baseApiUrl}/${path}?${queryString}`, {\n    method,\n    body,\n    headers\n  })\n  const respBody = await resp.text()\n  if (testSpec.response.headers) {\n    if (!objectSubsetEquals(testSpec.response.headers, resp.headers._headers)) {\n      throw new TestError(\n        'headers',\n        testSpec.response.headers,\n        resp.headers._headers,\n        resp,\n        respBody\n      )\n    }\n  }\n  if (testSpec.response === true && !resp.ok) {\n    throw new TestError('status', 200, resp.status, resp, respBody)\n  } else if (testSpec.response) {\n    if (testSpec.response.status && resp.status !== testSpec.response.status) {\n      throw new TestError('status', testSpec.response.status, resp.status, resp, respBody)\n    }\n    if (testSpec.response.body) {\n      if (typeof testSpec.response.body === 'string') {\n        if (respBody !== testSpec.response.body) {\n          throw new TestError('body', testSpec.response.body, respBody, resp, respBody)\n        }\n      } else {\n        const json = JSON.parse(respBody)\n        if (!objectSubsetEquals(testSpec.response.body, json)) {\n          throw new TestError('body', testSpec.response.body, json, resp, respBody)\n        }\n      }\n    }\n  }\n}\n\nexport default runTest\n"],"file":"runTest.js"}