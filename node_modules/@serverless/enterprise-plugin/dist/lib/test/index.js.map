{"version":3,"sources":["../../../src/lib/test/index.js"],"names":["test","ctx","fse","exists","sls","cli","log","yaml","readFile","tests","safeLoad","options","processedInput","function","filter","endpoint","name","provider","request","StackName","naming","getStackName","cfnStack","apigResource","Stacks","Outputs","OutputKey","endsWith","match","getServiceEndpointRegex","baseApiUrl","OutputValue","errors","numTests","funcs","service","functions","testSpec","method","events","http","path","testName","toUpperCase","process","stdout","write","chalk","green","push","error","red","length","yellow","i","resp","headers","status","info","_headers","map","key","value","join","replace","body","grey","expectedAndReceived","field","expected","JSON","stringify","received","white","passed","failed"],"mappings":"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","sourcesContent":["import { entries, find } from 'lodash'\nimport fse from 'fs-extra'\nimport chalk from 'chalk'\nimport yaml from 'js-yaml'\n\nimport runTest from './runTest'\n\nexport const test = async (ctx) => {\n  if (!fse.exists('serverless.test.yml')) {\n    ctx.sls.cli.log(`No serverless.test.yml file found`, `Serverless Enterprise`)\n    return\n  }\n  let tests = yaml.safeLoad(await fse.readFile('serverless.test.yml'))\n\n  const { options } = ctx.sls.processedInput\n  if (options.function) {\n    tests = tests.filter(({ endpoint }) => endpoint.function === options.function)\n  }\n  if (options.test) {\n    tests = tests.filter(({ name }) => name === options.test)\n  }\n\n  const cfnStack = await ctx.provider.request('CloudFormation', 'describeStacks', {\n    StackName: ctx.provider.naming.getStackName()\n  })\n  const apigResource = find(\n    cfnStack.Stacks[0].Outputs,\n    ({ OutputKey }) =>\n      !OutputKey.endsWith('Websocket') &&\n      OutputKey.match(ctx.provider.naming.getServiceEndpointRegex())\n  )\n  const baseApiUrl = apigResource.OutputValue\n\n  ctx.sls.cli.log(\n    `Test Results:\n\n   Summary --------------------------------------------------\n`,\n    `Serverless Enterprise`\n  )\n\n  const errors = []\n  let numTests = 0\n\n  const funcs = ctx.sls.service.functions || {}\n  for (const testSpec of tests || []) {\n    const method =\n      testSpec.endpoint.method || funcs[testSpec.endpoint.function].events[0].http.method\n    const path = testSpec.endpoint.path || funcs[testSpec.endpoint.function].events[0].http.path\n    const testName = `${method.toUpperCase()} ${path} - ${testSpec.name}`\n    try {\n      numTests += 1\n      process.stdout.write(`  running - ${testName}`)\n      await runTest(testSpec, path, method, baseApiUrl)\n      process.stdout.write(`\\r   ${chalk.green('passed')} - ${testName}\\n`)\n    } catch (error) {\n      errors.push({ testSpec, error })\n      process.stdout.write(`\\r   ${chalk.red('failed')} - ${testName}\\n`)\n    }\n  }\n  process.stdout.write('\\n')\n  if (errors.length > 0) {\n    process.stdout.write(\n      `   ${chalk.yellow('Details --------------------------------------------------')}\\n\\n`\n    )\n\n    for (let i = 0; i < errors.length; i++) {\n      const { error, testSpec } = errors[i]\n      const { headers, status } = error.resp\n      process.stdout.write(`   ${i + 1}) ${chalk.red(`Failed -  ${testSpec.name}`)}\\n`)\n      const info = `      status: ${status}\n      headers:\n    ${entries(headers._headers)\n      .map(([key, value]) => `    ${key}: ${value}`)\n      .join('\\n')\n      .replace(/\\n/g, '\\n    ')}\n      body: ${error.body}`\n      process.stdout.write(chalk.grey(info))\n\n      const expectedAndReceived = `\n      expected: ${error.field} = ${\n        typeof error.expected === 'object'\n          ? JSON.stringify(error.expected, null, 2).replace(/\\n/g, '\\n      ')\n          : error.expected\n      }\n      received: ${error.field} = ${\n        typeof error.received === 'object'\n          ? JSON.stringify(error.received, null, 2).replace(/\\n/g, '\\n      ')\n          : error.received\n      }\\n\\n`\n      process.stdout.write('\\n' + chalk.white(expectedAndReceived))\n    }\n  }\n\n  const passed = chalk.green(`${numTests - errors.length} passed`)\n  const failed = chalk.red(`${errors.length} failed`)\n  ctx.sls.cli.log(`Test Summary: ${passed}, ${failed}`, 'Serverless Enterprise')\n}\n"],"file":"index.js"}