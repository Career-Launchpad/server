"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.test = void 0;

var _lodash = require("lodash");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _chalk = _interopRequireDefault(require("chalk"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _runTest = _interopRequireDefault(require("./runTest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var test =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var tests, options, cfnStack, apigResource, baseApiUrl, errors, numTests, funcs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, testSpec, method, path, testName, i, _errors$i, error, _error$resp, headers, status, info, expectedAndReceived, passed, failed;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_fsExtra.default.exists('serverless.test.yml')) {
              _context.next = 3;
              break;
            }

            ctx.sls.cli.log(`No serverless.test.yml file found`, `Serverless Enterprise`);
            return _context.abrupt("return");

          case 3:
            _context.t0 = _jsYaml.default;
            _context.next = 6;
            return _fsExtra.default.readFile('serverless.test.yml');

          case 6:
            _context.t1 = _context.sent;
            tests = _context.t0.safeLoad.call(_context.t0, _context.t1);
            options = ctx.sls.processedInput.options;

            if (options.function) {
              tests = tests.filter(function (_ref2) {
                var endpoint = _ref2.endpoint;
                return endpoint.function === options.function;
              });
            }

            if (options.test) {
              tests = tests.filter(function (_ref3) {
                var name = _ref3.name;
                return name === options.test;
              });
            }

            _context.next = 13;
            return ctx.provider.request('CloudFormation', 'describeStacks', {
              StackName: ctx.provider.naming.getStackName()
            });

          case 13:
            cfnStack = _context.sent;
            apigResource = (0, _lodash.find)(cfnStack.Stacks[0].Outputs, function (_ref4) {
              var OutputKey = _ref4.OutputKey;
              return !OutputKey.endsWith('Websocket') && OutputKey.match(ctx.provider.naming.getServiceEndpointRegex());
            });
            baseApiUrl = apigResource.OutputValue;
            ctx.sls.cli.log(`Test Results:

   Summary --------------------------------------------------
`, `Serverless Enterprise`);
            errors = [];
            numTests = 0;
            funcs = ctx.sls.service.functions || {};
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 23;
            _iterator = (tests || [])[Symbol.iterator]();

          case 25:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 45;
              break;
            }

            testSpec = _step.value;
            method = testSpec.endpoint.method || funcs[testSpec.endpoint.function].events[0].http.method;
            path = testSpec.endpoint.path || funcs[testSpec.endpoint.function].events[0].http.path;
            testName = `${method.toUpperCase()} ${path} - ${testSpec.name}`;
            _context.prev = 30;
            numTests += 1;
            process.stdout.write(`  running - ${testName}`);
            _context.next = 35;
            return (0, _runTest.default)(testSpec, path, method, baseApiUrl);

          case 35:
            process.stdout.write(`\r   ${_chalk.default.green('passed')} - ${testName}\n`);
            _context.next = 42;
            break;

          case 38:
            _context.prev = 38;
            _context.t2 = _context["catch"](30);
            errors.push({
              testSpec,
              error: _context.t2
            });
            process.stdout.write(`\r   ${_chalk.default.red('failed')} - ${testName}\n`);

          case 42:
            _iteratorNormalCompletion = true;
            _context.next = 25;
            break;

          case 45:
            _context.next = 51;
            break;

          case 47:
            _context.prev = 47;
            _context.t3 = _context["catch"](23);
            _didIteratorError = true;
            _iteratorError = _context.t3;

          case 51:
            _context.prev = 51;
            _context.prev = 52;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 54:
            _context.prev = 54;

            if (!_didIteratorError) {
              _context.next = 57;
              break;
            }

            throw _iteratorError;

          case 57:
            return _context.finish(54);

          case 58:
            return _context.finish(51);

          case 59:
            process.stdout.write('\n');

            if (errors.length > 0) {
              process.stdout.write(`   ${_chalk.default.yellow('Details --------------------------------------------------')}\n\n`);

              for (i = 0; i < errors.length; i++) {
                _errors$i = errors[i], error = _errors$i.error, testSpec = _errors$i.testSpec;
                _error$resp = error.resp, headers = _error$resp.headers, status = _error$resp.status;
                process.stdout.write(`   ${i + 1}) ${_chalk.default.red(`Failed -  ${testSpec.name}`)}\n`);
                info = `      status: ${status}
      headers:
    ${(0, _lodash.entries)(headers._headers).map(function (_ref5) {
                  var _ref6 = _slicedToArray(_ref5, 2),
                      key = _ref6[0],
                      value = _ref6[1];

                  return `    ${key}: ${value}`;
                }).join('\n').replace(/\n/g, '\n    ')}
      body: ${error.body}`;
                process.stdout.write(_chalk.default.grey(info));
                expectedAndReceived = `
      expected: ${error.field} = ${typeof error.expected === 'object' ? JSON.stringify(error.expected, null, 2).replace(/\n/g, '\n      ') : error.expected}
      received: ${error.field} = ${typeof error.received === 'object' ? JSON.stringify(error.received, null, 2).replace(/\n/g, '\n      ') : error.received}\n\n`;
                process.stdout.write('\n' + _chalk.default.white(expectedAndReceived));
              }
            }

            passed = _chalk.default.green(`${numTests - errors.length} passed`);
            failed = _chalk.default.red(`${errors.length} failed`);
            ctx.sls.cli.log(`Test Summary: ${passed}, ${failed}`, 'Serverless Enterprise');

          case 64:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[23, 47, 51, 59], [30, 38], [52,, 54, 58]]);
  }));

  return function test(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.test = test;
//# sourceMappingURL=index.js.map