{"version":3,"sources":["../../src/lib/variables.js"],"names":["hookIntoVariableGetter","ctx","secrets","accessKey","getValueFromSource","sls","variables","variableString","startsWith","state","secretsUsed","add","substring","processedInput","commands","split","Error","service","key","substr","length","outputName","subkey","app","tenant","stage","provider","getStage","region","getRegion","value","_","get","bind"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { getStateVariable } from '@serverless/platform-sdk'\n\nexport const hookIntoVariableGetter = (ctx, secrets, accessKey) => {\n  const { getValueFromSource } = ctx.sls.variables\n\n  ctx.sls.variables.getValueFromSource = async (variableString) => {\n    if (variableString.startsWith(`secrets:`)) {\n      ctx.state.secretsUsed.add(variableString.substring(8))\n      if (\n        ctx.sls.processedInput.commands[0] === 'login' ||\n        ctx.sls.processedInput.commands[0] === 'logout'\n      ) {\n        return {}\n      }\n      if (!secrets[variableString.split(`secrets:`)[1]]) {\n        throw new Error(`$\\{${variableString}} not defined`)\n      }\n      return secrets[variableString.split(`secrets:`)[1]]\n    } else if (variableString.startsWith(`state:`)) {\n      if (\n        ctx.sls.processedInput.commands[0] === 'login' ||\n        ctx.sls.processedInput.commands[0] === 'logout'\n      ) {\n        return {}\n      }\n      const service = variableString.substring(6).split('.', 1)[0]\n      const key = variableString.substring(6).substr(service.length)\n      const outputName = key.split('.')[1]\n      const subkey = key.substr(outputName.length + 2)\n      const { value } = await getStateVariable({\n        accessKey,\n        outputName,\n        service,\n        app: ctx.sls.service.app,\n        tenant: ctx.sls.service.tenant,\n        stage: ctx.provider.getStage(),\n        region: ctx.provider.getRegion()\n      })\n      if (subkey) {\n        return _.get(value, subkey)\n      }\n      return value\n    }\n\n    const value = getValueFromSource.bind(ctx.sls.variables)(variableString)\n    return value\n  }\n\n  // return a restore function (mostly for testing)\n  return () => {\n    ctx.sls.variables.getValueFromSource = getValueFromSource\n  }\n}\n"],"file":"variables.js"}