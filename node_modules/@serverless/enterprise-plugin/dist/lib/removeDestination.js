"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _platformSdk = require("@serverless/platform-sdk");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var accessKey, destinationOpts;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!ctx.sls.service.custom || !ctx.sls.service.custom.enterprise || !ctx.sls.service.custom.enterprise.collectLambdaLogs)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            _context.next = 4;
            return (0, _platformSdk.getAccessKeyForTenant)(ctx.sls.service.tenant);

          case 4:
            accessKey = _context.sent;
            destinationOpts = {
              accessKey,
              appUid: ctx.sls.service.appUid,
              tenantUid: ctx.sls.service.tenantUid,
              serviceName: ctx.sls.service.getServiceName(),
              stageName: ctx.provider.getStage(),
              regionName: ctx.provider.getRegion()
            };
            _context.next = 8;
            return (0, _platformSdk.removeLogDestination)(destinationOpts);

          case 8:
            return _context.abrupt("return");

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=removeDestination.js.map