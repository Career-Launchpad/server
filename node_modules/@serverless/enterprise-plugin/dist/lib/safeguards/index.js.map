{"version":3,"sources":["../../../src/lib/safeguards/index.js"],"names":["loadPolicy","policyPath","safeguardName","require","runPolicies","ctx","basePath","sls","config","servicePath","location","service","localPoliciesPath","path","relative","__dirname","resolve","startsWith","sep","localPolicies","map","policy","safeguardConfig","Object","policyObjKeys","keys","length","Error","enforcementLevel","title","policyConfigs","safeguards","cli","log","policies","function","compiled","declaration","provider","frameworkVersion","version","artifactsPath","join","artifacts","Promise","all","filter","filename","match","content","JSON","parse","yml","jsonYamlArtifacts","runningPolicies","process","stdout","write","result","approved","failed","approve","chalk","green","fail","message","errorWord","color","red","keyword","policyHandle","state","safeguardsResults","markedPolicies","res","warned","passed","summary","details","yellow","i","grey","docs","description","every"],"mappings":"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","sourcesContent":["import { readdir, readFile } from 'fs-extra'\nimport yml from 'yamljs'\nimport path from 'path'\nimport { get, fromPairs, cloneDeep, omit } from 'lodash'\nimport chalk from 'chalk'\n\n// NOTE: not using path.join because it strips off the leading\nexport const loadPolicy = (policyPath, safeguardName) =>\n  require(`${policyPath || `./policies`}/${safeguardName}`)\n\nasync function runPolicies(ctx) {\n  const basePath = ctx.sls.config.servicePath\n\n  const location = get(ctx.sls.service, 'custom.safeguards.location', '.')\n  let localPoliciesPath = path.relative(__dirname, path.resolve(basePath, location))\n  if (!localPoliciesPath.startsWith('.')) {\n    localPoliciesPath = `.${path.sep}${localPoliciesPath}`\n  }\n  // using || [] instead of _.get's default bc if it's falsey we want it to be []\n  const localPolicies = get(ctx.sls.service, 'custom.safeguards.policies', []).map((policy) => {\n    let safeguardName = policy\n    let safeguardConfig = {}\n    if (policy instanceof Object) {\n      const policyObjKeys = Object.keys(policy)\n      if (policyObjKeys.length !== 1) {\n        throw new Error(\n          'Safeguards requires that each item in the policies list be either a string indicating a policy name, or else an object with a single key specifying the policy name with the policy options. One or more items were objects containing multiple keys. Correct these entries and try again.'\n        )\n      }\n      safeguardName = policyObjKeys[0]\n      safeguardConfig = policy[safeguardName] || {}\n    }\n    return {\n      safeguardName,\n      safeguardConfig,\n      policyPath: localPoliciesPath,\n      enforcementLevel: 'error',\n      title: `Local policy: ${safeguardName}`\n    }\n  })\n\n  const policyConfigs = [\n    ...localPolicies,\n    ...ctx.safeguards // fetched during asyncInit in deployment profile\n  ]\n\n  if (policyConfigs.length === 0) {\n    return\n  }\n\n  ctx.sls.cli.log(`Safeguards Processing...`, `Serverless Enterprise`)\n\n  const policies = policyConfigs.map((policy) => ({\n    ...policy,\n    function: loadPolicy(policy.policyPath, policy.safeguardName)\n  }))\n\n  const service = {\n    compiled: {},\n    declaration: cloneDeep(omit(ctx.sls.service, ['serverless'])),\n    provider: ctx.provider,\n    frameworkVersion: ctx.sls.version\n  }\n\n  const artifactsPath = path.join(basePath, '.serverless')\n  const artifacts = await readdir(artifactsPath)\n  const jsonYamlArtifacts = await Promise.all(\n    artifacts\n      .filter((filename) => filename.match(/\\.(json|yml|yaml)$/i))\n      .map(async (filename) => {\n        const content = await readFile(path.join(artifactsPath, filename))\n        try {\n          if (filename.match(/\\.json$/i)) {\n            return [filename, JSON.parse(content)]\n          }\n          return [filename, yml.parse(content)]\n        } catch (error) {\n          ctx.sls.cli.log(\n            `(Safeguards) Failed to parse file ${filename} in the artifacts directory.`,\n            `Serverless Enterprise`\n          )\n          throw error\n        }\n      })\n  )\n\n  ctx.sls.cli.log(\n    `Safeguards Results:\n\n   Summary --------------------------------------------------\n`,\n    `Serverless Enterprise`\n  )\n\n  service.compiled = fromPairs(jsonYamlArtifacts)\n  const runningPolicies = policies.map(async (policy) => {\n    process.stdout.write(`  running - ${policy.title}`)\n\n    const result = {\n      approved: false,\n      failed: false,\n      policy\n    }\n    const approve = () => {\n      result.approved = true\n      process.stdout.write(`\\r   ${chalk.green('passed')} - ${policy.title}\\n`)\n    }\n    const fail = (message) => {\n      if (result.failed) {\n        result.message += ` ${message}`\n      } else {\n        const errorWord = policy.enforcementLevel === 'error' ? 'failed' : 'warned'\n        const color = policy.enforcementLevel === 'error' ? chalk.red : chalk.keyword('orange')\n        process.stdout.write(`\\r   ${color(errorWord)} - ${policy.title}\\n`)\n        result.failed = true\n        result.message = message\n      }\n    }\n    const policyHandle = { approve, fail }\n\n    await policy.function(policyHandle, service, policy.safeguardConfig)\n    if (!result.approved && !result.failed) {\n      ctx.sls.cli.log(\n        `Safeguard Policy \"${policy.title}\" finished running, but did not explicitly approve the deployment. This is likely a problem in the policy itself. If this problem persists, contact the policy author.`,\n        `Serverless Enterprise`\n      )\n    }\n    return result\n  })\n\n  ctx.state.safeguardsResults = await Promise.all(runningPolicies)\n  const markedPolicies = ctx.state.safeguardsResults.filter((res) => !res.approved && res.failed)\n\n  const failed = markedPolicies.filter((res) => res.policy.enforcementLevel === 'error').length\n  const warned = markedPolicies.filter((res) => res.policy.enforcementLevel !== 'error').length\n  const passed = ctx.state.safeguardsResults.filter((res) => res.approved && !res.failed).length\n  const summary = `Safeguards Summary: ${chalk.green(`${passed} passed`)}, ${chalk.keyword(\n    'orange'\n  )(`${warned} warnings`)}, ${chalk.red(`${failed} errors`)}`\n\n  if (markedPolicies.length !== 0) {\n    const details =\n      `\\n   ${chalk.yellow('Details --------------------------------------------------')}\\n\\n` +\n      markedPolicies\n        .map(\n          (res, i) =>\n            `   ${i + 1}) ${\n              !res.failed\n                ? 'Finished inconclusively. Deployment halted.'\n                : res.policy.enforcementLevel == 'error'\n                ? chalk.red(`Failed - ${res.message}`)\n                : chalk.keyword('orange')(`Warned - ${res.message}`)\n            }\n      ${chalk.grey(`details: ${res.policy.function.docs}`)}\n      ${res.policy.description}`\n        )\n        .join('\\n\\n\\n')\n\n    process.stdout.write(`${details}\\n\\n`)\n    if (!markedPolicies.every((res) => res.approved || res.policy.enforcementLevel === 'warning')) {\n      ctx.sls.cli.log(summary, `\\nServerless Enterprise`)\n      throw new Error('Deployment blocked by Serverless Enterprise Safeguards')\n    }\n  }\n  ctx.sls.cli.log(summary, `\\nServerless Enterprise`)\n}\n\nexport default runPolicies\n"],"file":"index.js"}