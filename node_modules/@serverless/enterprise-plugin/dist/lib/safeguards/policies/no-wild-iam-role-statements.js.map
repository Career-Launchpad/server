{"version":3,"sources":["../../../../src/lib/safeguards/policies/no-wild-iam-role-statements.js"],"names":["module","exports","noWildIamPolicy","policy","service","failed","Resources","compiled","Type","Properties","Policies","iamPolicy","PolicyDocument","Statement","Effect","Action","Resource","action","fail","split","Array","isArray","rawResource","resourceStr","join","replace","arnService","resourceType","resource","JSON","stringify","approve","docs"],"mappings":"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","sourcesContent":["import { values } from 'lodash'\n\nmodule.exports = function noWildIamPolicy(policy, service) {\n  let failed = false\n  const {\n    compiled: {\n      'cloudformation-template-update-stack.json': { Resources }\n    }\n  } = service\n\n  for (const { Type, Properties } of values(Resources)) {\n    if (Type !== 'AWS::IAM::Role') {\n      continue\n    }\n\n    for (const iamPolicy of Properties.Policies || []) {\n      for (const { Effect, Action, Resource } of iamPolicy.PolicyDocument.Statement) {\n        if (Effect === 'Deny') {\n          continue\n        }\n\n        for (const action of Action) {\n          if (action === '*') {\n            failed = true\n            policy.fail(\n              `iamRoleStatement granting Action='*'. Wildcard actions in iamRoleStatements are not permitted.`\n            )\n          }\n          if (action.split(':')[1] === '*') {\n            failed = true\n            policy.fail(\n              `iamRoleStatement granting Action='${action}'. Wildcard actions in iamRoleStatements are not permitted.`\n            )\n          }\n        }\n        for (const rawResource of Array.isArray(Resource) ? Resource : [Resource]) {\n          let resourceStr = rawResource\n          if (typeof rawResource === 'object') {\n            if ('Fn::Join' in rawResource) {\n              resourceStr = rawResource['Fn::Join'][1].join(rawResource['Fn::Join'][0])\n            } else if ('Fn::Sub' in rawResource) {\n              if (typeof rawResource['Fn::Sub'] == 'string') {\n                resourceStr = rawResource['Fn::Sub'].replace(/\\$\\{[^$]*\\}/g, 'variable')\n              } else {\n                resourceStr = rawResource['Fn::Sub'][0].replace(/\\$\\{[^$]*\\}/g, 'variable')\n              }\n            }\n          }\n          if (resourceStr === '*') {\n            failed = true\n            policy.fail(\n              `iamRoleStatement granting Resource='*'. Wildcard resources in iamRoleStatements are not permitted.`\n            )\n          } else if (typeof resourceStr === 'string') {\n            const [, , arnService, , , resourceType, resource] = resourceStr.split(':')\n            if (arnService === '*' || resourceType === '*' || resource === '*') {\n              failed = true\n              policy.fail(\n                `iamRoleStatement granting Resource=${JSON.stringify(\n                  rawResource\n                )}. Wildcard resources or resourcetypes in iamRoleStatements are not permitted.`\n              )\n            }\n          } else {\n            /*\n             * if resourceStr isn't a string, it's probably an object\n             * containing a `Ref` or CFN function like `Fn::GetAtt` which are difficult to resolve\n             * cases like `Ref` are most likely safe. Explicitly bad cases using `Fn::Join` with\n             * all literals, are handled above.\n             */\n          }\n        }\n      }\n    }\n  }\n\n  if (!failed) {\n    policy.approve()\n  }\n}\n\nmodule.exports.docs = 'https://git.io/fjfk7'\n"],"file":"no-wild-iam-role-statements.js"}