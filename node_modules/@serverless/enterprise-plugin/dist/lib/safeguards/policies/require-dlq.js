"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('lodash'),
    entries = _require.entries,
    fromPairs = _require.fromPairs;

var asyncEvents = new Set(['s3', 'sns', 'alexaSkill', 'iot', 'cloudwatchEvent', 'cloudwatchLog', 'cognitoUserPool', 'alexaSmartHome']);

module.exports = function dlqPolicy(policy, service) {
  var failed = false;
  var functions = service.declaration.functions,
      naming = service.provider.naming,
      Resources = service.compiled['cloudformation-template-update-stack.json'].Resources;
  var logicalFuncNamesToConfigFuncName = fromPairs(Object.keys(functions || {}).map(function (funcName) {
    return [naming.getLambdaLogicalId(funcName), funcName];
  })); // for (const [name, { events, onError }] of entries(functions)) {

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var _step$value = _slicedToArray(_step.value, 2),
          funcName = _step$value[0],
          _step$value$ = _step$value[1],
          Properties = _step$value$.Properties,
          Type = _step$value$.Type;

      if (Type !== 'AWS::Lambda::Function' || Properties.DeadLetterConfig && Properties.DeadLetterConfig.TargetArn) {
        return "continue";
      }

      var events = functions[logicalFuncNamesToConfigFuncName[funcName]].events || [];
      var eventTypes = new Set(events.map(function (ev) {
        return Object.keys(ev)[0];
      }));
      var eventIntersection = new Set(_toConsumableArray(asyncEvents).filter(function (x) {
        return eventTypes.has(x);
      }));

      if (events.length === 0 || eventIntersection.size > 0) {
        failed = true;
        policy.fail(`Function "${logicalFuncNamesToConfigFuncName[funcName]}" doesn't have a Dead Letter Queue configured.`);
      }
    };

    for (var _iterator = entries(Resources)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (!failed) {
    policy.approve();
  }
};

module.exports.docs = 'https://git.io/fjfkN';
//# sourceMappingURL=require-dlq.js.map