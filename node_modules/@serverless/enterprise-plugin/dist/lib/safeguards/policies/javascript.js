"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jsonataQuery = require('jsonata');

var vm = require('vm');

var execStatement = function execStatement(service, statement) {
  var jsonata = function jsonata(queryStatement) {
    var expression = jsonataQuery(queryStatement);
    var value = expression.evaluate(service);

    if (Array.isArray(value)) {
      return value.length > 0;
    } else if (typeof value === 'object') {
      return Object.keys(value).length > 0;
    }

    return Boolean(value);
  };

  var sandbox = _objectSpread({
    jsonata
  }, service);

  vm.createContext(sandbox);
  return vm.runInContext(statement, sandbox);
};

module.exports = function javascriptPolicy(policy, service, options) {
  var statement = JSON.parse(options);
  var response;

  try {
    response = execStatement(service, statement);
  } catch (ex) {
    policy.fail(`Error in the policy statement: "${statement}"`);
    return;
  }

  if (!response) {
    policy.fail('Must comply with all of the configured queries.');
    return;
  }

  policy.approve();
};

module.exports.docs = 'https://git.io/fjI97';
//# sourceMappingURL=javascript.js.map