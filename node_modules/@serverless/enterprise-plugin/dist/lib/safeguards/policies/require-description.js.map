{"version":3,"sources":["../../../../src/lib/safeguards/policies/require-description.js"],"names":["require","entries","fromPairs","module","exports","requireDescriptionPolicy","policy","service","options","failed","functions","declaration","naming","provider","Resources","compiled","logicalFuncNamesToConfigFuncName","Object","keys","map","funcName","getLambdaLogicalId","Properties","Type","Description","fail","length","maxLength","minLength","approve","docs"],"mappings":";;;;;;;;;;eAA+BA,OAAO,CAAC,QAAD,C;IAA9BC,O,YAAAA,O;IAASC,S,YAAAA,S;;AAEjBC,MAAM,CAACC,OAAP,GAAiB,SAASC,wBAAT,CAAkCC,MAAlC,EAA0CC,OAA1C,EAAmDC,OAAnD,EAA4D;AAC3E,MAAIC,MAAM,GAAG,KAAb;AAD2E,MAG1DC,SAH0D,GAQvEH,OARuE,CAGzEI,WAHyE,CAG1DD,SAH0D;AAAA,MAI7DE,MAJ6D,GAQvEL,OARuE,CAIzEM,QAJyE,CAI7DD,MAJ6D;AAAA,MAMxBE,SANwB,GAQvEP,OARuE,CAKzEQ,QALyE,CAMvE,2CANuE,EAMxBD,SANwB;AAS3E,MAAME,gCAAgC,GAAGd,SAAS,CAChDe,MAAM,CAACC,IAAP,CAAYR,SAAS,IAAI,EAAzB,EAA6BS,GAA7B,CAAiC,UAACC,QAAD;AAAA,WAAc,CAACR,MAAM,CAACS,kBAAP,CAA0BD,QAA1B,CAAD,EAAsCA,QAAtC,CAAd;AAAA,GAAjC,CADgD,CAAlD;AAT2E;AAAA;AAAA;;AAAA;AAa3E,yBAA+CnB,OAAO,CAACa,SAAD,CAAtD,8HAAmE;AAAA;AAAA,UAAvDM,QAAuD;AAAA;AAAA,UAA3CE,UAA2C,gBAA3CA,UAA2C;AAAA,UAA/BC,IAA+B,gBAA/BA,IAA+B;;AACjE,UAAIA,IAAI,KAAK,uBAAb,EAAsC;AACpC;AACD;;AACD,UAAI,CAACD,UAAU,CAACE,WAAhB,EAA6B;AAC3Bf,QAAAA,MAAM,GAAG,IAAT;AACAH,QAAAA,MAAM,CAACmB,IAAP,CAAa,aAAYT,gCAAgC,CAACI,QAAD,CAAW,sBAApE;AACD,OAHD,MAGO;AACL,YAAIE,UAAU,CAACE,WAAX,CAAuBE,MAAvB,IAAkClB,OAAO,IAAIA,OAAO,CAACmB,SAApB,IAAkC,GAAnE,CAAJ,EAA6E;AAC3ElB,UAAAA,MAAM,GAAG,IAAT;AACAH,UAAAA,MAAM,CAACmB,IAAP,CACG,6BAA4BT,gCAAgC,CAACI,QAAD,CAAW,eAD1E;AAGD;;AACD,YAAIE,UAAU,CAACE,WAAX,CAAuBE,MAAvB,IAAkClB,OAAO,IAAIA,OAAO,CAACoB,SAApB,IAAkC,EAAnE,CAAJ,EAA4E;AAC1EnB,UAAAA,MAAM,GAAG,IAAT;AACAH,UAAAA,MAAM,CAACmB,IAAP,CACG,6BAA4BT,gCAAgC,CAACI,QAAD,CAAW,gBAD1E;AAGD;AACF;AACF;AAlC0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoC3E,MAAI,CAACX,MAAL,EAAa;AACXH,IAAAA,MAAM,CAACuB,OAAP;AACD;AACF,CAvCD;;AAyCA1B,MAAM,CAACC,OAAP,CAAe0B,IAAf,GAAsB,sBAAtB","sourcesContent":["const { entries, fromPairs } = require('lodash')\n\nmodule.exports = function requireDescriptionPolicy(policy, service, options) {\n  let failed = false\n  const {\n    declaration: { functions },\n    provider: { naming },\n    compiled: {\n      'cloudformation-template-update-stack.json': { Resources }\n    }\n  } = service\n  const logicalFuncNamesToConfigFuncName = fromPairs(\n    Object.keys(functions || {}).map((funcName) => [naming.getLambdaLogicalId(funcName), funcName])\n  )\n\n  for (const [funcName, { Properties, Type }] of entries(Resources)) {\n    if (Type !== 'AWS::Lambda::Function') {\n      continue\n    }\n    if (!Properties.Description) {\n      failed = true\n      policy.fail(`Function \"${logicalFuncNamesToConfigFuncName[funcName]}\" has no description`)\n    } else {\n      if (Properties.Description.length > ((options && options.maxLength) || 256)) {\n        failed = true\n        policy.fail(\n          `Description for function \"${logicalFuncNamesToConfigFuncName[funcName]}\" is too long`\n        )\n      }\n      if (Properties.Description.length < ((options && options.minLength) || 30)) {\n        failed = true\n        policy.fail(\n          `Description for function \"${logicalFuncNamesToConfigFuncName[funcName]}\" is too short`\n        )\n      }\n    }\n  }\n\n  if (!failed) {\n    policy.approve()\n  }\n}\n\nmodule.exports.docs = 'https://git.io/fjfkN'\n"],"file":"require-description.js"}