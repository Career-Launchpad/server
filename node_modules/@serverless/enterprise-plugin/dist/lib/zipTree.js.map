{"version":3,"sources":["../../src/lib/zipTree.js"],"names":["addTree","zip","src","srcN","path","normalize","fs","readdir","contents","Promise","all","map","name","srcPath","join","stat","then","isDirectory","folder","opts","date","unixPermissions","mode","readFile","data","file","writeZip","targetPath","resolve","generateNodeStream","platform","process","compression","compressionOptions","level","pipe","createWriteStream","on"],"mappings":";;;;;;;;AAEA;;AACA;;;;;;;;AAEA;;;;;;SAMsBA,O;;;AAoBtB;;;;;;;;;;;0BApBO,iBAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,IADD,GACQC,cAAKC,SAAL,CAAeH,GAAf,CADR;AAAA;AAAA,mBAGkBI,iBAAGC,OAAH,CAAWJ,IAAX,CAHlB;;AAAA;AAGCK,YAAAA,QAHD;AAAA;AAAA,mBAICC,OAAO,CAACC,GAAR,CACJF,QAAQ,CAACG,GAAT,CAAa,UAACC,IAAD,EAAU;AACrB,kBAAMC,OAAO,GAAGT,cAAKU,IAAL,CAAUX,IAAV,EAAgBS,IAAhB,CAAhB;;AAEA,qBAAON,iBAAGS,IAAH,CAAQF,OAAR,EAAiBG,IAAjB,CAAsB,UAACD,IAAD,EAAU;AACrC,oBAAIA,IAAI,CAACE,WAAL,EAAJ,EAAwB;AACtB,yBAAOjB,OAAO,CAACC,GAAG,CAACiB,MAAJ,CAAWN,IAAX,CAAD,EAAmBC,OAAnB,CAAd;AACD;;AACD,oBAAMM,IAAI,GAAG;AAAEC,kBAAAA,IAAI,EAAE,CAAR;AAAWC,kBAAAA,eAAe,EAAEN,IAAI,CAACO;AAAjC,iBAAb;AACA,uBAAOhB,iBAAGiB,QAAH,CAAYV,OAAZ,EAAqBG,IAArB,CAA0B,UAACQ,IAAD;AAAA,yBAAUvB,GAAG,CAACwB,IAAJ,CAASZ,OAAT,EAAkBW,IAAlB,EAAwBL,IAAxB,CAAV;AAAA,iBAA1B,CAAP;AACD,eANM,CAAP;AAOD,aAVD,CADI,CAJD;;AAAA;AAAA,6CAiBElB,GAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0BA,IAAMyB,QAAQ,GAAG,SAAXA,QAAW,CAACzB,GAAD,EAAM0B,UAAN;AAAA,SACtB,IAAIlB,OAAJ,CAAY,UAACmB,OAAD;AAAA,WACV3B,GAAG,CACA4B,kBADH,CACsB;AAClBC,MAAAA,QAAQ,EAAEC,OAAO,CAACD,QAAR,IAAoB,OAApB,GAA8B,KAA9B,GAAsC,MAD9B;AAElBE,MAAAA,WAAW,EAAE,SAFK;AAGlBC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,KAAK,EAAE;AADW;AAHF,KADtB,EAQGC,IARH,CAQQ7B,iBAAG8B,iBAAH,CAAqBT,UAArB,CARR,EASGU,EATH,CASM,QATN,EASgBT,OAThB,CADU;AAAA,GAAZ,CADsB;AAAA,CAAjB","sourcesContent":["// mostly copied from https://github.com/UnitedIncome/serverless-python-requirements/blob/master/lib/zipTree.js\n// modified to use native promises and fs-extra's promise support and use import/export\nimport fs from 'fs-extra'\nimport path from 'path'\n\n/**\n * Add a directory recursively to a zip file. Files in src will be added to the top folder of zip.\n * @param {JSZip} zip a zip object in the folder you want to add files to.\n * @param {string} src the source folder.\n * @return {Promise} a promise offering the original JSZip object.\n */\nexport async function addTree(zip, src) {\n  const srcN = path.normalize(src)\n\n  const contents = await fs.readdir(srcN)\n  await Promise.all(\n    contents.map((name) => {\n      const srcPath = path.join(srcN, name)\n\n      return fs.stat(srcPath).then((stat) => {\n        if (stat.isDirectory()) {\n          return addTree(zip.folder(name), srcPath)\n        }\n        const opts = { date: 0, unixPermissions: stat.mode }\n        return fs.readFile(srcPath).then((data) => zip.file(srcPath, data, opts))\n      })\n    })\n  )\n  return zip // Original zip for chaining.\n}\n\n/**\n * Write zip contents to a file.\n * @param {JSZip} zip the zip object\n * @param {string} targetPath path to write the zip file to.\n * @return {Promise} a promise resolving to null.\n */\nexport const writeZip = (zip, targetPath) =>\n  new Promise((resolve) =>\n    zip\n      .generateNodeStream({\n        platform: process.platform == 'win32' ? 'dos' : 'unix',\n        compression: 'deflate',\n        compressionOptions: {\n          level: 9\n        }\n      })\n      .pipe(fs.createWriteStream(targetPath))\n      .on('finish', resolve)\n  )\n"],"file":"zipTree.js"}