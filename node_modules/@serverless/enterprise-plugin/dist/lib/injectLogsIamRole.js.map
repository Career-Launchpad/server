{"version":3,"sources":["../../src/lib/injectLogsIamRole.js"],"names":["ctx","sls","service","custom","enterprise","collectLambdaLogs","provider","compiledCloudFormationTemplate","Resources","filter","Type","length","tenant","accessKey","awsAccountId","EnterpriseLogAccessIamRole","Properties","AssumeRolePolicyDocument","Version","Statement","Effect","Principal","AWS","Action","Condition","StringEquals","tenantUid","Policies","PolicyName","PolicyDocument","Resource","map","logicalId","Outputs","Value"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;0BAEe,iBAAeA,GAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEXA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,IACAH,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UADvB,IAEAJ,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UAAvB,CAAkCC,iBAAlC,KAAwD,KAJ7C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAUX,oBAAOL,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwDC,SAA/D,EAA0EC,MAA1E,CACE;AAAA,kBAAGC,IAAH,SAAGA,IAAH;AAAA,qBAAcA,IAAI,KAAK,qBAAvB;AAAA,aADF,EAEEC,MAFF,KAEa,CAZF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAkBW,wCAAsBX,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBU,MAAtC,CAlBX;;AAAA;AAkBPC,YAAAA,SAlBO;AAAA;AAAA,mBAoBkB,8BAAYA,SAAZ,CApBlB;;AAAA;AAAA;AAoBLC,YAAAA,YApBK,SAoBLA,YApBK;AAqBbd,YAAAA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwDC,SAAxD,CAAkEO,0BAAlE,GAA+F;AAC7FL,cAAAA,IAAI,EAAE,gBADuF;AAE7FM,cAAAA,UAAU,EAAE;AACVC,gBAAAA,wBAAwB,EAAE;AACxBC,kBAAAA,OAAO,EAAE,YADe;AAExBC,kBAAAA,SAAS,EAAE,CACT;AACEC,oBAAAA,MAAM,EAAE,OADV;AAEEC,oBAAAA,SAAS,EAAE;AACTC,sBAAAA,GAAG,EAAG,gBAAeR,YAAa;AADzB,qBAFb;AAKES,oBAAAA,MAAM,EAAE,gBALV;AAMEC,oBAAAA,SAAS,EAAE;AACTC,sBAAAA,YAAY,EAAE;AACZ,0CAAmB,wBAAuBzB,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBwB,SAAU;AADxD;AADL;AANb,mBADS;AAFa,iBADhB;AAkBVC,gBAAAA,QAAQ,EAAE,CACR;AACEC,kBAAAA,UAAU,EAAE,iBADd;AAEEC,kBAAAA,cAAc,EAAE;AACdX,oBAAAA,OAAO,EAAE,YADK;AAEdC,oBAAAA,SAAS,EAAE,CACT;AACEC,sBAAAA,MAAM,EAAE,OADV;AAEEG,sBAAAA,MAAM,EAAE,CAAC,sBAAD,CAFV;AAGEO,sBAAAA,QAAQ,EAAE,qBAAQ9B,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwDC,SAAhE,EACPC,MADO,CACA;AAAA;AAAA,4BAAMC,IAAN,YAAMA,IAAN;;AAAA,+BAAkBA,IAAI,KAAK,qBAA3B;AAAA,uBADA,EAEPqB,GAFO,CAEH;AAAA;AAAA,4BAAEC,SAAF;;AAAA,+BAAkB;AACrB,wCAAc,CAACA,SAAD,EAAY,KAAZ;AADO,yBAAlB;AAAA,uBAFG;AAHZ,qBADS;AAFG;AAFlB,iBADQ;AAlBA;AAFiF,aAA/F;AAyCAhC,YAAAA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwD0B,OAAxD,CAAgElB,0BAAhE,GAA6F;AAC3FmB,cAAAA,KAAK,EAAE;AACL,8BAAc,CAAC,4BAAD,EAA+B,KAA/B;AADT;AADoF,aAA7F;;AA9Da;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { getAccessKeyForTenant, getMetadata } from '@serverless/platform-sdk'\nimport { entries, values } from 'lodash'\n\nexport default async function(ctx) {\n  if (\n    ctx.sls.service.custom &&\n    ctx.sls.service.custom.enterprise &&\n    ctx.sls.service.custom.enterprise.collectLambdaLogs === false\n  ) {\n    return\n  }\n\n  if (\n    values(ctx.sls.service.provider.compiledCloudFormationTemplate.Resources).filter(\n      ({ Type }) => Type === 'AWS::Logs::LogGroup'\n    ).length === 0\n  ) {\n    // no log groups\n    return\n  }\n\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant)\n\n  const { awsAccountId } = await getMetadata(accessKey)\n  ctx.sls.service.provider.compiledCloudFormationTemplate.Resources.EnterpriseLogAccessIamRole = {\n    Type: 'AWS::IAM::Role',\n    Properties: {\n      AssumeRolePolicyDocument: {\n        Version: '2012-10-17',\n        Statement: [\n          {\n            Effect: 'Allow',\n            Principal: {\n              AWS: `arn:aws:iam::${awsAccountId}:root`\n            },\n            Action: 'sts:AssumeRole',\n            Condition: {\n              StringEquals: {\n                'sts:ExternalId': `ServerlessEnterprise-${ctx.sls.service.tenantUid}`\n              }\n            }\n          }\n        ]\n      },\n      Policies: [\n        {\n          PolicyName: 'LogFilterAccess',\n          PolicyDocument: {\n            Version: '2012-10-17',\n            Statement: [\n              {\n                Effect: 'Allow',\n                Action: ['logs:FilterLogEvents'],\n                Resource: entries(ctx.sls.service.provider.compiledCloudFormationTemplate.Resources)\n                  .filter(([, { Type }]) => Type === 'AWS::Logs::LogGroup')\n                  .map(([logicalId]) => ({\n                    'Fn::GetAtt': [logicalId, 'Arn']\n                  }))\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n  ctx.sls.service.provider.compiledCloudFormationTemplate.Outputs.EnterpriseLogAccessIamRole = {\n    Value: {\n      'Fn::GetAtt': ['EnterpriseLogAccessIamRole', 'Arn']\n    }\n  }\n}\n"],"file":"injectLogsIamRole.js"}