"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hookIntoVariableGetter = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _platformSdk = require("@serverless/platform-sdk");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var hookIntoVariableGetter = function hookIntoVariableGetter(ctx, secrets, accessKey) {
  var getValueFromSource = ctx.sls.variables.getValueFromSource;

  ctx.sls.variables.getValueFromSource =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(variableString) {
      var service, key, outputName, subkey, _ref2, _value, value;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!variableString.startsWith(`secrets:`)) {
                _context.next = 9;
                break;
              }

              ctx.state.secretsUsed.add(variableString.substring(8));

              if (!(ctx.sls.processedInput.commands[0] === 'login' || ctx.sls.processedInput.commands[0] === 'logout')) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", {});

            case 4:
              if (secrets[variableString.split(`secrets:`)[1]]) {
                _context.next = 6;
                break;
              }

              throw new Error(`$\{${variableString}} not defined`);

            case 6:
              return _context.abrupt("return", secrets[variableString.split(`secrets:`)[1]]);

            case 9:
              if (!variableString.startsWith(`state:`)) {
                _context.next = 23;
                break;
              }

              if (!(ctx.sls.processedInput.commands[0] === 'login' || ctx.sls.processedInput.commands[0] === 'logout')) {
                _context.next = 12;
                break;
              }

              return _context.abrupt("return", {});

            case 12:
              service = variableString.substring(6).split('.', 1)[0];
              key = variableString.substring(6).substr(service.length);
              outputName = key.split('.')[1];
              subkey = key.substr(outputName.length + 2);
              _context.next = 18;
              return (0, _platformSdk.getStateVariable)({
                accessKey,
                outputName,
                service,
                app: ctx.sls.service.app,
                tenant: ctx.sls.service.tenant,
                stage: ctx.provider.getStage(),
                region: ctx.provider.getRegion()
              });

            case 18:
              _ref2 = _context.sent;
              _value = _ref2.value;

              if (!subkey) {
                _context.next = 22;
                break;
              }

              return _context.abrupt("return", _lodash.default.get(_value, subkey));

            case 22:
              return _context.abrupt("return", _value);

            case 23:
              value = getValueFromSource.bind(ctx.sls.variables)(variableString);
              return _context.abrupt("return", value);

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(); // return a restore function (mostly for testing)


  return function () {
    ctx.sls.variables.getValueFromSource = getValueFromSource;
  };
};

exports.hookIntoVariableGetter = hookIntoVariableGetter;
//# sourceMappingURL=variables.js.map