"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.wrapNodeJs = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _jszip = _interopRequireDefault(require("jszip"));

var _zipTree = require("./zipTree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 * Wrap Node.js Functions
 */
var wrapNodeJs = function wrapNodeJs(fn, ctx) {
  var newHandlerCode = `var serverlessSDK = require('./serverless-sdk/index.js')
serverlessSDK = new serverlessSDK({
tenantId: '${ctx.sls.service.tenant}',
applicationName: '${ctx.sls.service.app}',
appUid: '${ctx.sls.service.appUid}',
tenantUid: '${ctx.sls.service.tenantUid}',
serviceName: '${ctx.sls.service.service}',
stageName: '${ctx.provider.getStage()}'})
const handlerWrapperArgs = { functionName: '${fn.name}', timeout: ${fn.timeout}}
try {
  const userHandler = require('./${fn.entryOrig}.js')
  module.exports.handler = serverlessSDK.handler(userHandler.${fn.handlerOrig}, handlerWrapperArgs)
} catch (error) {
  module.exports.handler = serverlessSDK.handler(() => { throw error }, handlerWrapperArgs)
}
`; // Create new handlers

  _fsExtra.default.writeFileSync(_path.default.join(ctx.sls.config.servicePath, `${fn.entryNew}.js`), newHandlerCode);
};

exports.wrapNodeJs = wrapNodeJs;

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var functions, func, runtime, timeout, name, entry, handler, pathSdk, pathSdkDest, fn, _func, zipData, zip, wrapperData;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // Check if we support the provider
            if (ctx.sls.service.provider.name !== 'aws') {
              ctx.sls.cli.log('Warning: The Serverless Platform Plugin does not current support this provider.');
            }
            /*
             * Prepare Functions
             */


            functions = ctx.sls.service.functions;
            ctx.state.functions = {};
            _context.t0 = regeneratorRuntime.keys(functions);

          case 4:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 17;
              break;
            }

            func = _context.t1.value;
            runtime = functions[func].runtime ? functions[func].runtime : ctx.sls.service.provider.runtime;

            if (runtime.includes('nodejs')) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("continue", 4);

          case 9:
            // the default is 6s: https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
            timeout = functions[func].timeout ? functions[func].timeout : 6; // Process name

            name = void 0;

            if (functions[func].name) {
              ;
              name = functions[func].name;
            } else {
              name = `${ctx.sls.service.service}-${ctx.sls.service.provider.stage}-${func}`;
            } // Process handler


            entry = functions[func].handler.split('.')[0];
            handler = functions[func].handler.split('.')[1];
            ctx.state.functions[func] = {
              key: func,
              name: name,
              runtime: runtime,
              timeout: timeout,
              entryOrig: entry,
              handlerOrig: handler,
              entryNew: `s-${func}`,
              handlerNew: `handler`
            };
            _context.next = 4;
            break;

          case 17:
            /*
             * Wrap Functions
             */
            ctx.state.pathAssets = _path.default.join(ctx.sls.config.servicePath, 'serverless-sdk'); // Clear existing handler dir

            if (_fsExtra.default.pathExistsSync(ctx.state.pathAssets)) {
              _fsExtra.default.removeSync(ctx.state.pathAssets);
            } // Create new handler dir


            _fsExtra.default.ensureDirSync(ctx.state.pathAssets); // Copy SDK


            pathSdk = _path.default.resolve(__dirname, '../../sdk-js/dist/index.js');
            pathSdkDest = _path.default.join(ctx.state.pathAssets, './index.js');

            _fsExtra.default.copySync(pathSdk, pathSdkDest); // Prepare & Copy Function Handlers


            _context.t2 = regeneratorRuntime.keys(ctx.state.functions);

          case 24:
            if ((_context.t3 = _context.t2()).done) {
              _context.next = 51;
              break;
            }

            fn = _context.t3.value;
            _func = ctx.state.functions[fn];

            if (_func.runtime.includes('nodejs')) {
              _context.next = 29;
              break;
            }

            return _context.abrupt("return");

          case 29:
            // Add the Serverless SDK wrapper around the function
            wrapNodeJs(_func, ctx); // Re-assign the handler to point to the wrapper

            ctx.sls.service.functions[fn].handler = `${_func.entryNew}.${_func.handlerNew}`;

            if (!_lodash.default.get(ctx.sls.service.functions[fn], 'package.artifact')) {
              _context.next = 48;
              break;
            }

            _context.next = 34;
            return _fsExtra.default.readFile(ctx.sls.service.functions[fn].package.artifact);

          case 34:
            zipData = _context.sent;
            _context.next = 37;
            return _jszip.default.loadAsync(zipData);

          case 37:
            zip = _context.sent;
            _context.next = 40;
            return _fsExtra.default.readFile(_path.default.join(ctx.sls.config.servicePath, `${_func.entryNew}.js`));

          case 40:
            wrapperData = _context.sent;
            zip.file(`${_func.entryNew}.js`, wrapperData);
            _context.next = 44;
            return (0, _zipTree.addTree)(zip, 'serverless-sdk');

          case 44:
            _context.next = 46;
            return (0, _zipTree.writeZip)(zip, ctx.sls.service.functions[fn].package.artifact);

          case 46:
            _context.next = 49;
            break;

          case 48:
            if (_lodash.default.get(ctx.sls.service.functions[fn], 'package.individually', _lodash.default.get(ctx.sls.service, 'package.individually', false))) {
              // add include directives for handler file & sdk lib
              if (ctx.sls.service.functions[fn].package === undefined) {
                ctx.sls.service.functions[fn].package = {};
              }

              if (ctx.sls.service.functions[fn].package.include === undefined) {
                ctx.sls.service.functions[fn].package.include = [];
              }

              ctx.sls.service.functions[fn].package.include.push(`${_func.entryNew}.js`);
              ctx.sls.service.functions[fn].package.include.push('serverless-sdk/**');
            }

          case 49:
            _context.next = 24;
            break;

          case 51:
            // add include directives for handler file & sdk lib
            if (!_lodash.default.get(ctx.sls.service, 'package.individually', false)) {
              if (ctx.sls.service.package === undefined) {
                ctx.sls.service.package = {};
              }

              if (ctx.sls.service.package.include === undefined) {
                ctx.sls.service.package.include = [];
              }

              ctx.sls.service.package.include.push('s-*.js');
              ctx.sls.service.package.include.push('serverless-sdk/**');
            }

          case 52:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=wrap.js.map