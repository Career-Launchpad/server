"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generate = generate;
exports.eventDict = void 0;

var _eventMocks = _interopRequireDefault(require("@serverless/event-mocks"));

var _zlib = _interopRequireDefault(require("zlib"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function recordWrapper(event) {
  return {
    Records: [event]
  };
}

function encodeBody(body) {
  if (body) {
    return Buffer.from(body).toString('base64');
  }
}

function gzipBody(_x) {
  return _gzipBody.apply(this, arguments);
}

function _gzipBody() {
  _gzipBody = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(body) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new Promise(function (res, rej) {
              _zlib.default.gzip(body, function (error, result) {
                if (error) {
                  return rej(error);
                }

                res(result);
              });
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _gzipBody.apply(this, arguments);
}

function parsedBody(body) {
  return JSON.parse(body);
}

var eventDict = {
  'aws:apiGateway': function awsApiGateway(body) {
    return {
      body: body
    };
  },
  'aws:websocket': function awsWebsocket(body) {
    return {
      body: body
    };
  },
  'aws:sns': function awsSns(body) {
    return recordWrapper({
      Sns: {
        Message: body
      }
    });
  },
  'aws:sqs': function awsSqs(body) {
    return recordWrapper({
      body: body
    });
  },
  'aws:dynamo': function awsDynamo(body) {
    return recordWrapper({
      dynamodb: body
    });
  },
  'aws:kinesis': function awsKinesis(body) {
    return recordWrapper({
      kinesis: {
        data: encodeBody(body)
      }
    });
  },
  'aws:cloudWatchLog': function () {
    var _awsCloudWatchLog = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(body) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = encodeBody;
              _context.next = 3;
              return gzipBody(body);

            case 3:
              _context.t1 = _context.sent;
              _context.t2 = (0, _context.t0)(_context.t1);
              _context.t3 = {
                data: _context.t2
              };
              return _context.abrupt("return", {
                awslogs: _context.t3
              });

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function awsCloudWatchLog(_x2) {
      return _awsCloudWatchLog.apply(this, arguments);
    }

    return awsCloudWatchLog;
  }(),
  'aws:s3': function awsS3() {
    return {};
  },
  'aws:alexaSmartHome': function awsAlexaSmartHome(body) {
    return parsedBody(body);
  },
  'aws:alexaSkill': function awsAlexaSkill(body) {
    return parsedBody(body);
  },
  'aws:cloudWatch': function awsCloudWatch(body) {
    return parsedBody(body);
  },
  'aws:iot': function awsIot(body) {
    return parsedBody(body);
  },
  'aws:cognitoUserPool': function awsCognitoUserPool(body) {
    return parsedBody(body);
  },
  'aws:websocket': function awsWebsocket(body) {
    return {
      body: body
    };
  }
};
exports.eventDict = eventDict;

function wrapEvent(_x3, _x4) {
  return _wrapEvent.apply(this, arguments);
}

function _wrapEvent() {
  _wrapEvent = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(eventType, body) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!eventDict.hasOwnProperty(eventType)) {
              _context3.next = 7;
              break;
            }

            _context3.t0 = _eventMocks.default;
            _context3.t1 = eventType;
            _context3.next = 5;
            return eventDict[eventType](body);

          case 5:
            _context3.t2 = _context3.sent;
            return _context3.abrupt("return", (0, _context3.t0)(_context3.t1, _context3.t2));

          case 7:
            throw new Error('Invalid event specified.');

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _wrapEvent.apply(this, arguments);
}

function generate(_x5) {
  return _generate.apply(this, arguments);
}

function _generate() {
  _generate = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(ctx) {
    var options, body, event;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            options = ctx.sls.processedInput.options;
            body = options.body === undefined ? '{}' : options.body;
            _context4.next = 4;
            return wrapEvent(options.type, body);

          case 4:
            event = _context4.sent;
            return _context4.abrupt("return", console.log(JSON.stringify(event)));

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _generate.apply(this, arguments);
}

module.exports = {
  generate,
  eventDict
};
//# sourceMappingURL=generateEvent.js.map