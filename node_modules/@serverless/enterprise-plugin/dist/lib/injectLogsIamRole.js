"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _platformSdk = require("@serverless/platform-sdk");

var _lodash = require("lodash");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _default(_x) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var accessKey, _ref3, awsAccountId;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(ctx.sls.service.custom && ctx.sls.service.custom.enterprise && ctx.sls.service.custom.enterprise.collectLambdaLogs === false)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            if (!((0, _lodash.values)(ctx.sls.service.provider.compiledCloudFormationTemplate.Resources).filter(function (_ref2) {
              var Type = _ref2.Type;
              return Type === 'AWS::Logs::LogGroup';
            }).length === 0)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return");

          case 4:
            _context.next = 6;
            return (0, _platformSdk.getAccessKeyForTenant)(ctx.sls.service.tenant);

          case 6:
            accessKey = _context.sent;
            _context.next = 9;
            return (0, _platformSdk.getMetadata)(accessKey);

          case 9:
            _ref3 = _context.sent;
            awsAccountId = _ref3.awsAccountId;
            ctx.sls.service.provider.compiledCloudFormationTemplate.Resources.EnterpriseLogAccessIamRole = {
              Type: 'AWS::IAM::Role',
              Properties: {
                AssumeRolePolicyDocument: {
                  Version: '2012-10-17',
                  Statement: [{
                    Effect: 'Allow',
                    Principal: {
                      AWS: `arn:aws:iam::${awsAccountId}:root`
                    },
                    Action: 'sts:AssumeRole',
                    Condition: {
                      StringEquals: {
                        'sts:ExternalId': `ServerlessEnterprise-${ctx.sls.service.tenantUid}`
                      }
                    }
                  }]
                },
                Policies: [{
                  PolicyName: 'LogFilterAccess',
                  PolicyDocument: {
                    Version: '2012-10-17',
                    Statement: [{
                      Effect: 'Allow',
                      Action: ['logs:FilterLogEvents'],
                      Resource: (0, _lodash.entries)(ctx.sls.service.provider.compiledCloudFormationTemplate.Resources).filter(function (_ref4) {
                        var _ref5 = _slicedToArray(_ref4, 2),
                            Type = _ref5[1].Type;

                        return Type === 'AWS::Logs::LogGroup';
                      }).map(function (_ref6) {
                        var _ref7 = _slicedToArray(_ref6, 1),
                            logicalId = _ref7[0];

                        return {
                          'Fn::GetAtt': [logicalId, 'Arn']
                        };
                      })
                    }]
                  }
                }]
              }
            };
            ctx.sls.service.provider.compiledCloudFormationTemplate.Outputs.EnterpriseLogAccessIamRole = {
              Value: {
                'Fn::GetAtt': ['EnterpriseLogAccessIamRole', 'Arn']
              }
            };

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref.apply(this, arguments);
}
//# sourceMappingURL=injectLogsIamRole.js.map