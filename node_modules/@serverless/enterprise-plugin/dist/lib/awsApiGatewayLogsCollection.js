"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("./utils");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var logRoleLogicalName, template, deployments, deploymentIndex, deploymentKey, deployment;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!ctx.sls.service.custom || !ctx.sls.service.custom.enterprise || !ctx.sls.service.custom.enterprise.collectApiLogs)) {
              _context.next = 3;
              break;
            }

            ctx.sls.cli.log('Info: The Serverless Platform Plugin is not configured to collect API Gateway Logs.');
            return _context.abrupt("return");

          case 3:
            ctx.sls.cli.log('Info: This plugin is collecting API Gateway logs.', 'Serverless Enterprise');
            logRoleLogicalName = 'IamRoleApiGatewayCloudwatchLogRole';
            template = ctx.sls.service.provider.compiledCloudFormationTemplate;
            deployments = (0, _utils.pickResourceType)(template, 'AWS::ApiGateway::Deployment');
            template.Resources = _objectSpread({}, template.Resources, {
              [logRoleLogicalName]: {
                Type: 'AWS::IAM::Role',
                Properties: {
                  AssumeRolePolicyDocument: {
                    Version: '2012-10-17',
                    Statement: [{
                      Effect: 'Allow',
                      Principal: {
                        Service: ['apigateway.amazonaws.com']
                      },
                      Action: ['sts:AssumeRole']
                    }]
                  },
                  Policies: [{
                    PolicyName: `${ctx.sls.service.service}-apiGatewayLogs`,
                    PolicyDocument: {
                      Version: '2012-10-17',
                      Statement: [{
                        Effect: 'Allow',
                        Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:DescribeLogGroups', 'logs:DescribeLogStreams', 'logs:PutLogEvents', 'logs:GetLogEvents', 'logs:FilterLogEvents'],
                        Resource: '*'
                      }]
                    }
                  }],
                  Path: '/'
                }
              },
              ApiGatewayAccount: {
                Type: 'AWS::ApiGateway::Account',
                Properties: {
                  CloudWatchRoleArn: {
                    'Fn::GetAtt': [logRoleLogicalName, 'Arn']
                  }
                },
                DependsOn: [logRoleLogicalName]
              }
            });

            for (deploymentIndex in deployments) {
              deploymentKey = deployments[deploymentIndex].key;
              deployment = deployments[deploymentIndex].resource;
              template.Resources[`ApiGatewayStage${(0, _utils.upperFirst)(deployment.Properties.StageName)}`] = {
                Type: 'AWS::ApiGateway::Stage',
                Properties: {
                  StageName: deployment.Properties.StageName,
                  Description: `${deployment.Properties.StageName} stage of ${ctx.sls.service.service}`,
                  RestApiId: {
                    Ref: 'ApiGatewayRestApi'
                  },
                  DeploymentId: {
                    Ref: deploymentKey
                  },
                  MethodSettings: [{
                    LoggingLevel: 'INFO',
                    DataTraceEnabled: true,
                    HttpMethod: '*',
                    ResourcePath: '/*',
                    MetricsEnabled: false
                  }]
                }
                /*
                 * Finally, this will make sure every stage's API details are published to to our Kinesis Streams
                 */

              };
              template.Resources[`CloudWatchLogsSubscriptionFilter${(0, _utils.upperFirst)(deployment.Properties.StageName)}`] = {
                Type: 'AWS::Logs::SubscriptionFilter',
                Properties: {
                  DestinationArn: 'arn:aws:logs:us-east-1:377024778620:destination:ServerlessPlatformDemoAPIGatewayLogs',
                  FilterPattern: '',
                  // TODO: Make this only get what we want!
                  LogGroupName: {
                    'Fn::Sub': ['API-Gateway-Execution-Logs_${ApiGatewayId}/${StageName}', {
                      ApiGatewayId: {
                        Ref: 'ApiGatewayRestApi'
                      },
                      StageName: {
                        Ref: `ApiGatewayStage${(0, _utils.upperFirst)(deployment.Properties.StageName)}`
                      }
                    }]
                  }
                }
              };
              template.Resources[deploymentKey] = deployment;
              delete template.Resources[deploymentKey].Properties.StageName;
            }

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=awsApiGatewayLogsCollection.js.map