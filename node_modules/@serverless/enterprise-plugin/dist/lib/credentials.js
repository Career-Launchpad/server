"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _platformSdk = require("@serverless/platform-sdk");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _default(_x) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var accessKey, _ref2, accessKeyId, secretAccessKey, sessionToken;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (process.env.SLS_CLOUD_ACCESS) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", Promise.resolve());

          case 2:
            _context.next = 4;
            return (0, _platformSdk.getAccessKeyForTenant)(ctx.sls.service.tenant);

          case 4:
            accessKey = _context.sent;
            _context.next = 7;
            return (0, _platformSdk.getCredentials)({
              accessKey,
              stageName: ctx.provider.getStage(),
              command: ctx.sls.processedInput.commands[0],
              app: ctx.sls.service.app,
              tenant: ctx.sls.service.tenant,
              service: ctx.sls.service.getServiceName()
            });

          case 7:
            _ref2 = _context.sent;
            accessKeyId = _ref2.accessKeyId;
            secretAccessKey = _ref2.secretAccessKey;
            sessionToken = _ref2.sessionToken;
            process.env.AWS_ACCESS_KEY_ID = accessKeyId;
            process.env.AWS_SECRET_ACCESS_KEY = secretAccessKey;
            process.env.AWS_SESSION_TOKEN = sessionToken;
            ctx.sls.cli.log('Cloud credentials set from Serverless Platform.');

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref.apply(this, arguments);
}
//# sourceMappingURL=credentials.js.map