"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _serializeError = _interopRequireDefault(require("./serializeError"));

var _deployment = require("./deployment");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _default(ctx) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(error, id) {
        var deployment, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // eslint-disable-line

                /*
                 * Error: Failed Deployment
                 * - Handle failed deployments
                 */
                ctx.sls.cli.log('Publishing service to the Enterprise Dashboard...', 'Serverless Enterprise');
                _context.next = 3;
                return (0, _deployment.parseDeploymentData)(ctx, 'error', (0, _serializeError.default)(error));

              case 3:
                deployment = _context.sent;
                _context.next = 6;
                return deployment.save();

              case 6:
                result = _context.sent;
                ctx.sls.cli.log(`Successfully published your service to the Enterprise Dashboard: ${result.dashboardUrl}`, // eslint-disable-line
                'Serverless Enterprise');

                if (!ctx.state.deployment) {
                  ctx.state.deployment = {};
                }

                ctx.state.deployment.complete = true;

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}
//# sourceMappingURL=errorHandler.js.map