"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureDeployProfile = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _platformSdk = require("@serverless/platform-sdk");

var _variables = require("./variables");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var configureDeployProfile =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var accessKey, deploymentProfile;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _platformSdk.getAccessKeyForTenant)(ctx.sls.service.tenant);

          case 2:
            accessKey = _context.sent;
            _context.next = 5;
            return (0, _platformSdk.getDeployProfile)(_objectSpread({
              accessKey,
              stage: ctx.provider.getStage()
            }, _lodash.default.pick(ctx.sls.service, ['tenant', 'app', 'service'])));

          case 5:
            deploymentProfile = _context.sent;

            if (deploymentProfile.providerCredentials) {
              ctx.provider.cachedCredentials = deploymentProfile.providerCredentials.secretValue;
              ctx.provider.cachedCredentials.region = ctx.provider.getRegion();
            }

            ctx.safeguards = deploymentProfile.safeguardsPolicies;
            (0, _variables.hookIntoVariableGetter)(ctx, _lodash.default.fromPairs(deploymentProfile.secretValues.map(function (_ref2) {
              var secretName = _ref2.secretName,
                  value = _ref2.secretProperties.value;
              return [secretName, value];
            })), accessKey);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function configureDeployProfile(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.configureDeployProfile = configureDeployProfile;
//# sourceMappingURL=deployProfile.js.map