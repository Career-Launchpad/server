"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getServerlessFilePath;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fileExists =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(filename) {
    var stat;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _fsExtra.default.lstat(filename);

          case 3:
            stat = _context.sent;
            return _context.abrupt("return", stat.isFile());

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", false);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));

  return function fileExists(_x) {
    return _ref.apply(this, arguments);
  };
}();

function getServerlessFilePath(_x2, _x3) {
  return _getServerlessFilePath.apply(this, arguments);
}

function _getServerlessFilePath() {
  _getServerlessFilePath = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(filename, servicePath) {
    var filePath, customExists, ymlFilePath, yamlFilePath, jsonFilePath, jsFilePath, _ref2, _ref3, json, yml, yaml, js;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!filename) {
              _context2.next = 8;
              break;
            }

            filePath = _path.default.join(servicePath, filename);
            _context2.next = 4;
            return fileExists(filePath);

          case 4:
            customExists = _context2.sent;

            if (customExists) {
              _context2.next = 7;
              break;
            }

            throw new Error('Could not find serverless service definition file.');

          case 7:
            return _context2.abrupt("return", filePath);

          case 8:
            ymlFilePath = _path.default.join(servicePath, 'serverless.yml');
            yamlFilePath = _path.default.join(servicePath, 'serverless.yaml');
            jsonFilePath = _path.default.join(servicePath, 'serverless.json');
            jsFilePath = _path.default.join(servicePath, 'serverless.js');
            _context2.next = 14;
            return Promise.all([fileExists(jsonFilePath), fileExists(ymlFilePath), fileExists(yamlFilePath), fileExists(jsFilePath)]);

          case 14:
            _ref2 = _context2.sent;
            _ref3 = _slicedToArray(_ref2, 4);
            json = _ref3[0];
            yml = _ref3[1];
            yaml = _ref3[2];
            js = _ref3[3];

            if (!yml) {
              _context2.next = 24;
              break;
            }

            return _context2.abrupt("return", ymlFilePath);

          case 24:
            if (!yaml) {
              _context2.next = 28;
              break;
            }

            return _context2.abrupt("return", yamlFilePath);

          case 28:
            if (!json) {
              _context2.next = 32;
              break;
            }

            return _context2.abrupt("return", jsonFilePath);

          case 32:
            if (!js) {
              _context2.next = 34;
              break;
            }

            return _context2.abrupt("return", jsFilePath);

          case 34:
            throw new Error('Could not find any serverless service definition file.');

          case 35:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getServerlessFilePath.apply(this, arguments);
}
//# sourceMappingURL=getServerlessFilePath.js.map