"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _lodash = _interopRequireDefault(require("lodash"));

var _platformSdk = _interopRequireDefault(require("@serverless/platform-sdk"));

var _getServerlessFilePath = _interopRequireDefault(require("./getServerlessFilePath"));

var _package = require("../../../package.json");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 * Parse Deployment Data
 * - Takes data from the Framework and formats it into our data model
 */
var parseDeploymentData =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    var status,
        error,
        archived,
        service,
        deployment,
        accountId,
        serverlessFileName,
        serverlessFile,
        cfnStack,
        logsRole,
        logsRoleArn,
        fnName,
        fn,
        deployedFunctionName,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _iterator,
        _step,
        sub,
        subDetails,
        type,
        apigResource,
        apiId,
        _apigResource,
        _apiId,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            status = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'success';
            error = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;
            archived = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;
            service = ctx.sls.service;
            deployment = new _platformSdk.default.Deployment();
            _context.next = 7;
            return ctx.provider.getAccountId();

          case 7:
            accountId = _context.sent;
            _context.next = 10;
            return (0, _getServerlessFilePath.default)(ctx.sls.processedInput.options.config, ctx.sls.config.servicePath);

          case 10:
            serverlessFileName = _context.sent;
            _context.next = 13;
            return _fsExtra.default.readFile(serverlessFileName);

          case 13:
            serverlessFile = _context.sent.toString();

            if (archived) {
              _context.next = 51;
              break;
            }

            _context.next = 17;
            return ctx.provider.request('CloudFormation', 'describeStacks', {
              StackName: ctx.provider.naming.getStackName()
            });

          case 17:
            cfnStack = _context.sent;
            // get log access role info
            logsRole = _lodash.default.find(cfnStack.Stacks[0].Outputs, function (_ref2) {
              var OutputKey = _ref2.OutputKey;
              return OutputKey === 'EnterpriseLogAccessIamRole';
            });
            logsRoleArn = logsRole && logsRole.OutputValue;
            deployment.set({
              serverlessFile,
              serverlessFileName,
              versionFramework: ctx.sls.version,
              versionEnterprisePlugin: _package.version,
              tenantUid: service.tenantUid,
              appUid: service.appUid,
              tenantName: service.tenant,
              appName: service.app,
              serviceName: service.service,
              stageName: ctx.provider.getStage(),
              regionName: ctx.provider.getRegion(),
              logsRoleArn,
              archived,
              status,
              provider: {
                type: 'aws',
                aws: {
                  accountId // environment: Object.keys(service.provider.environment || {})

                }
              },
              layers: service.layers || {},
              plugins: service.plugins ? service.plugins.modules || service.plugins : [],
              custom: service.custom || {},
              safeguards: ctx.state.safeguardsResults,
              secrets: Array.from(ctx.state.secretsUsed),
              outputs: service.outputs,
              error
            });
            /*
             * Add this deployment's functions...
             */

            _context.t0 = regeneratorRuntime.keys(service.functions);

          case 22:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 49;
              break;
            }

            fnName = _context.t1.value;
            fn = service.functions[fnName];
            deployedFunctionName = fn.name || `${service.service}-${ctx.provider.getStage()}-${fnName}`;
            fn.events = fn.events || []; // Function

            deployment.setFunction({
              name: deployedFunctionName,
              description: fn.description || null,
              timeout: fn.timeout,
              type: 'awsLambda',
              arn: `arn:aws:lambda:${ctx.provider.getRegion()}:${accountId}:function:${deployedFunctionName}`,
              custom: {
                handler: fn.handler,
                memorySize: fn.memory,
                runtime: fn.runtime,
                environment: Object.keys(fn.environment || {}),
                role: fn.role,
                onError: fn.onError,
                awsKmsKeyArn: fn.awsKmsKeyArn,
                tags: fn.tags || {},
                vpc: fn.vpc || {},
                layers: fn.layers || [],
                name: fn.name || fnName
              }
            });
            /*
             * Add this functions's subscriptions...
             */

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 31;

            for (_iterator = fn.events[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              sub = _step.value;
              subDetails = {};
              type = void 0;

              if (typeof sub === 'string') {
                type = sub;
              } else {
                type = Object.keys(sub)[0];

                if (type === 'http') {
                  apigResource = _lodash.default.find(cfnStack.Stacks[0].Outputs, function (_ref3) {
                    var OutputKey = _ref3.OutputKey;
                    return !OutputKey.endsWith('Websocket') && OutputKey.match(ctx.provider.naming.getServiceEndpointRegex());
                  });
                  apiId = apigResource && apigResource.OutputValue.split('https://')[1].split('.')[0];
                  subDetails = {
                    path: sub.http.path,
                    method: sub.http.method,
                    cors: sub.http.cors,
                    integration: sub.http.integration,
                    restApiId: apiId
                  };
                } else if (sub[type] instanceof Object) {
                  Object.assign(subDetails, sub[type]);
                } else {
                  Object.assign(subDetails, {
                    [type]: sub[type]
                  });
                }

                if (type === 'websocket') {
                  _apigResource = _lodash.default.find(cfnStack.Stacks[0].Outputs, function (_ref4) {
                    var OutputKey = _ref4.OutputKey;
                    return OutputKey.endsWith('Websocket') && OutputKey.match(ctx.provider.naming.getServiceEndpointRegex());
                  });
                  _apiId = _apigResource && _apigResource.OutputValue.split('wss://')[1].split('.')[0];
                  subDetails.websocketApiId = _apiId;
                }
              }

              deployment.setSubscription(_objectSpread({
                type,
                function: deployedFunctionName
              }, subDetails));
            }

            _context.next = 39;
            break;

          case 35:
            _context.prev = 35;
            _context.t2 = _context["catch"](31);
            _didIteratorError = true;
            _iteratorError = _context.t2;

          case 39:
            _context.prev = 39;
            _context.prev = 40;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 42:
            _context.prev = 42;

            if (!_didIteratorError) {
              _context.next = 45;
              break;
            }

            throw _iteratorError;

          case 45:
            return _context.finish(42);

          case 46:
            return _context.finish(39);

          case 47:
            _context.next = 22;
            break;

          case 49:
            _context.next = 52;
            break;

          case 51:
            deployment.set({
              versionFramework: ctx.sls.version,
              versionEnterprisePlugin: _package.version,
              tenantUid: service.tenantUid,
              appUid: service.appUid,
              tenantName: service.tenant,
              appName: service.app,
              serviceName: service.service,
              stageName: ctx.provider.getStage(),
              regionName: ctx.provider.getRegion(),
              archived,
              status,
              secrets: Array.from(ctx.state.secretsUsed),
              error
            });

          case 52:
            return _context.abrupt("return", deployment);

          case 53:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[31, 35, 39, 47], [40,, 42, 46]]);
  }));

  return function parseDeploymentData(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = parseDeploymentData;
exports.default = _default;
//# sourceMappingURL=parse.js.map