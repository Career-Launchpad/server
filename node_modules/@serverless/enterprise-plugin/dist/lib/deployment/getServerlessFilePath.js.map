{"version":3,"sources":["../../../src/lib/deployment/getServerlessFilePath.js"],"names":["fileExists","filename","fs","lstat","stat","isFile","getServerlessFilePath","servicePath","filePath","path","join","customExists","Error","ymlFilePath","yamlFilePath","jsonFilePath","jsFilePath","Promise","all","json","yml","yaml","js"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEIC,iBAAGC,KAAH,CAASF,QAAT,CAFJ;;AAAA;AAETG,YAAAA,IAFS;AAAA,6CAGRA,IAAI,CAACC,MAAL,EAHQ;;AAAA;AAAA;AAAA;AAAA,6CAKR,KALQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVL,UAAU;AAAA;AAAA;AAAA,GAAhB;;SAS8BM,qB;;;;;;;0BAAf,kBAAqCL,QAArC,EAA+CM,WAA/C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACTN,QADS;AAAA;AAAA;AAAA;;AAELO,YAAAA,QAFK,GAEMC,cAAKC,IAAL,CAAUH,WAAV,EAAuBN,QAAvB,CAFN;AAAA;AAAA,mBAGgBD,UAAU,CAACQ,QAAD,CAH1B;;AAAA;AAGLG,YAAAA,YAHK;;AAAA,gBAINA,YAJM;AAAA;AAAA;AAAA;;AAAA,kBAKH,IAAIC,KAAJ,CAAU,oDAAV,CALG;;AAAA;AAAA,8CAOJJ,QAPI;;AAAA;AAUPK,YAAAA,WAVO,GAUOJ,cAAKC,IAAL,CAAUH,WAAV,EAAuB,gBAAvB,CAVP;AAWPO,YAAAA,YAXO,GAWQL,cAAKC,IAAL,CAAUH,WAAV,EAAuB,iBAAvB,CAXR;AAYPQ,YAAAA,YAZO,GAYQN,cAAKC,IAAL,CAAUH,WAAV,EAAuB,iBAAvB,CAZR;AAaPS,YAAAA,UAbO,GAaMP,cAAKC,IAAL,CAAUH,WAAV,EAAuB,eAAvB,CAbN;AAAA;AAAA,mBAeuBU,OAAO,CAACC,GAAR,CAAY,CAC9ClB,UAAU,CAACe,YAAD,CADoC,EAE9Cf,UAAU,CAACa,WAAD,CAFoC,EAG9Cb,UAAU,CAACc,YAAD,CAHoC,EAI9Cd,UAAU,CAACgB,UAAD,CAJoC,CAAZ,CAfvB;;AAAA;AAAA;AAAA;AAeNG,YAAAA,IAfM;AAeAC,YAAAA,GAfA;AAeKC,YAAAA,IAfL;AAeWC,YAAAA,EAfX;;AAAA,iBAqBTF,GArBS;AAAA;AAAA;AAAA;;AAAA,8CAsBJP,WAtBI;;AAAA;AAAA,iBAuBFQ,IAvBE;AAAA;AAAA;AAAA;;AAAA,8CAwBJP,YAxBI;;AAAA;AAAA,iBAyBFK,IAzBE;AAAA;AAAA;AAAA;;AAAA,8CA0BJJ,YA1BI;;AAAA;AAAA,iBA2BFO,EA3BE;AAAA;AAAA;AAAA;;AAAA,8CA4BJN,UA5BI;;AAAA;AAAA,kBA8BP,IAAIJ,KAAJ,CAAU,wDAAV,CA9BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import path from 'path'\nimport fs from 'fs-extra'\n\nconst fileExists = async (filename) => {\n  try {\n    const stat = await fs.lstat(filename)\n    return stat.isFile()\n  } catch {\n    return false\n  }\n}\n\nexport default async function getServerlessFilePath(filename, servicePath) {\n  if (filename) {\n    const filePath = path.join(servicePath, filename)\n    const customExists = await fileExists(filePath)\n    if (!customExists) {\n      throw new Error('Could not find serverless service definition file.')\n    }\n    return filePath\n  }\n\n  const ymlFilePath = path.join(servicePath, 'serverless.yml')\n  const yamlFilePath = path.join(servicePath, 'serverless.yaml')\n  const jsonFilePath = path.join(servicePath, 'serverless.json')\n  const jsFilePath = path.join(servicePath, 'serverless.js')\n\n  const [json, yml, yaml, js] = await Promise.all([\n    fileExists(jsonFilePath),\n    fileExists(ymlFilePath),\n    fileExists(yamlFilePath),\n    fileExists(jsFilePath)\n  ])\n  if (yml) {\n    return ymlFilePath\n  } else if (yaml) {\n    return yamlFilePath\n  } else if (json) {\n    return jsonFilePath\n  } else if (js) {\n    return jsFilePath\n  }\n  throw new Error('Could not find any serverless service definition file.')\n}\n"],"file":"getServerlessFilePath.js"}