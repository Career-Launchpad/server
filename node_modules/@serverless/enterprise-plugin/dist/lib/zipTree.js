"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addTree = addTree;
exports.writeZip = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Add a directory recursively to a zip file. Files in src will be added to the top folder of zip.
 * @param {JSZip} zip a zip object in the folder you want to add files to.
 * @param {string} src the source folder.
 * @return {Promise} a promise offering the original JSZip object.
 */
function addTree(_x, _x2) {
  return _addTree.apply(this, arguments);
}
/**
 * Write zip contents to a file.
 * @param {JSZip} zip the zip object
 * @param {string} targetPath path to write the zip file to.
 * @return {Promise} a promise resolving to null.
 */


function _addTree() {
  _addTree = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(zip, src) {
    var srcN, contents;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            srcN = _path.default.normalize(src);
            _context.next = 3;
            return _fsExtra.default.readdir(srcN);

          case 3:
            contents = _context.sent;
            _context.next = 6;
            return Promise.all(contents.map(function (name) {
              var srcPath = _path.default.join(srcN, name);

              return _fsExtra.default.stat(srcPath).then(function (stat) {
                if (stat.isDirectory()) {
                  return addTree(zip.folder(name), srcPath);
                }

                var opts = {
                  date: 0,
                  unixPermissions: stat.mode
                };
                return _fsExtra.default.readFile(srcPath).then(function (data) {
                  return zip.file(srcPath, data, opts);
                });
              });
            }));

          case 6:
            return _context.abrupt("return", zip);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _addTree.apply(this, arguments);
}

var writeZip = function writeZip(zip, targetPath) {
  return new Promise(function (resolve) {
    return zip.generateNodeStream({
      platform: process.platform == 'win32' ? 'dos' : 'unix',
      compression: 'deflate',
      compressionOptions: {
        level: 9
      }
    }).pipe(_fsExtra.default.createWriteStream(targetPath)).on('finish', resolve);
  });
};

exports.writeZip = writeZip;
//# sourceMappingURL=zipTree.js.map