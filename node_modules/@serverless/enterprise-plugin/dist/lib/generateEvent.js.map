{"version":3,"sources":["../../src/lib/generateEvent.js"],"names":["recordWrapper","event","Records","encodeBody","body","Buffer","from","toString","gzipBody","Promise","res","rej","zlib","gzip","error","result","parsedBody","JSON","parse","eventDict","Sns","Message","dynamodb","kinesis","data","awslogs","wrapEvent","eventType","hasOwnProperty","createEvent","Error","generate","ctx","options","sls","processedInput","undefined","type","console","log","stringify","module","exports"],"mappings":"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","sourcesContent":["import createEvent from '@serverless/event-mocks'\nimport zlib from 'zlib'\n\nfunction recordWrapper(event) {\n  return {\n    Records: [event]\n  }\n}\n\nfunction encodeBody(body) {\n  if (body) {\n    return Buffer.from(body).toString('base64')\n  }\n}\n\nasync function gzipBody(body) {\n  return new Promise((res, rej) => {\n    zlib.gzip(body, function(error, result) {\n      if (error) {\n        return rej(error)\n      }\n      res(result)\n    })\n  })\n}\n\nfunction parsedBody(body) {\n  return JSON.parse(body)\n}\n\nexport const eventDict = {\n  'aws:apiGateway': (body) => ({ body: body }),\n  'aws:websocket': (body) => ({ body: body }),\n  'aws:sns': (body) => recordWrapper({ Sns: { Message: body } }),\n  'aws:sqs': (body) => recordWrapper({ body: body }),\n  'aws:dynamo': (body) => recordWrapper({ dynamodb: body }),\n  'aws:kinesis': (body) =>\n    recordWrapper({\n      kinesis: { data: encodeBody(body) }\n    }),\n  'aws:cloudWatchLog': async (body) => ({\n    awslogs: { data: encodeBody(await gzipBody(body)) }\n  }),\n  'aws:s3': () => ({}),\n  'aws:alexaSmartHome': (body) => parsedBody(body),\n  'aws:alexaSkill': (body) => parsedBody(body),\n  'aws:cloudWatch': (body) => parsedBody(body),\n  'aws:iot': (body) => parsedBody(body),\n  'aws:cognitoUserPool': (body) => parsedBody(body),\n  'aws:websocket': (body) => ({ body: body })\n}\n\nasync function wrapEvent(eventType, body) {\n  if (eventDict.hasOwnProperty(eventType)) {\n    return createEvent(eventType, await eventDict[eventType](body))\n  }\n\n  throw new Error('Invalid event specified.')\n}\n\nexport async function generate(ctx) {\n  const { options } = ctx.sls.processedInput\n  const body = options.body === undefined ? '{}' : options.body\n  const event = await wrapEvent(options.type, body)\n  // eslint-disable-next-line no-console\n  return console.log(JSON.stringify(event))\n}\n\nmodule.exports = {\n  generate,\n  eventDict\n}\n"],"file":"generateEvent.js"}