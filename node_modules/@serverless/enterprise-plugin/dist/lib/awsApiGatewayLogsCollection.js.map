{"version":3,"sources":["../../src/lib/awsApiGatewayLogsCollection.js"],"names":["ctx","sls","service","custom","enterprise","collectApiLogs","cli","log","logRoleLogicalName","template","provider","compiledCloudFormationTemplate","deployments","Resources","Type","Properties","AssumeRolePolicyDocument","Version","Statement","Effect","Principal","Service","Action","Policies","PolicyName","PolicyDocument","Resource","Path","ApiGatewayAccount","CloudWatchRoleArn","DependsOn","deploymentIndex","deploymentKey","key","deployment","resource","StageName","Description","RestApiId","Ref","DeploymentId","MethodSettings","LoggingLevel","DataTraceEnabled","HttpMethod","ResourcePath","MetricsEnabled","DestinationArn","FilterPattern","LogGroupName","ApiGatewayId"],"mappings":"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","sourcesContent":["/*\n * AWS API Gateway Logs Collection\n * - Collects all API Gateway logs\n */\n\nimport { pickResourceType, upperFirst } from './utils'\n\nexport default async (ctx) => {\n  if (\n    !ctx.sls.service.custom ||\n    !ctx.sls.service.custom.enterprise ||\n    !ctx.sls.service.custom.enterprise.collectApiLogs\n  ) {\n    ctx.sls.cli.log(\n      'Info: The Serverless Platform Plugin is not configured to collect API Gateway Logs.'\n    )\n    return\n  }\n\n  ctx.sls.cli.log('Info: This plugin is collecting API Gateway logs.', 'Serverless Enterprise')\n  const logRoleLogicalName = 'IamRoleApiGatewayCloudwatchLogRole'\n  const template = ctx.sls.service.provider.compiledCloudFormationTemplate\n\n  const deployments = pickResourceType(template, 'AWS::ApiGateway::Deployment')\n\n  template.Resources = {\n    ...template.Resources,\n    [logRoleLogicalName]: {\n      Type: 'AWS::IAM::Role',\n      Properties: {\n        AssumeRolePolicyDocument: {\n          Version: '2012-10-17',\n          Statement: [\n            {\n              Effect: 'Allow',\n              Principal: {\n                Service: ['apigateway.amazonaws.com']\n              },\n              Action: ['sts:AssumeRole']\n            }\n          ]\n        },\n        Policies: [\n          {\n            PolicyName: `${ctx.sls.service.service}-apiGatewayLogs`,\n            PolicyDocument: {\n              Version: '2012-10-17',\n              Statement: [\n                {\n                  Effect: 'Allow',\n                  Action: [\n                    'logs:CreateLogGroup',\n                    'logs:CreateLogStream',\n                    'logs:DescribeLogGroups',\n                    'logs:DescribeLogStreams',\n                    'logs:PutLogEvents',\n                    'logs:GetLogEvents',\n                    'logs:FilterLogEvents'\n                  ],\n                  Resource: '*'\n                }\n              ]\n            }\n          }\n        ],\n        Path: '/'\n      }\n    },\n    ApiGatewayAccount: {\n      Type: 'AWS::ApiGateway::Account',\n      Properties: {\n        CloudWatchRoleArn: {\n          'Fn::GetAtt': [logRoleLogicalName, 'Arn']\n        }\n      },\n      DependsOn: [logRoleLogicalName]\n    }\n  }\n\n  for (const deploymentIndex in deployments) {\n    const deploymentKey = deployments[deploymentIndex].key\n    const deployment = deployments[deploymentIndex].resource\n\n    template.Resources[`ApiGatewayStage${upperFirst(deployment.Properties.StageName)}`] = {\n      Type: 'AWS::ApiGateway::Stage',\n      Properties: {\n        StageName: deployment.Properties.StageName,\n        Description: `${deployment.Properties.StageName} stage of ${ctx.sls.service.service}`,\n        RestApiId: {\n          Ref: 'ApiGatewayRestApi'\n        },\n        DeploymentId: {\n          Ref: deploymentKey\n        },\n        MethodSettings: [\n          {\n            LoggingLevel: 'INFO',\n            DataTraceEnabled: true,\n            HttpMethod: '*',\n            ResourcePath: '/*',\n            MetricsEnabled: false\n          }\n        ]\n      }\n    }\n\n    /*\n     * Finally, this will make sure every stage's API details are published to to our Kinesis Streams\n     */\n    template.Resources[\n      `CloudWatchLogsSubscriptionFilter${upperFirst(deployment.Properties.StageName)}`\n    ] = {\n      Type: 'AWS::Logs::SubscriptionFilter',\n      Properties: {\n        DestinationArn:\n          'arn:aws:logs:us-east-1:377024778620:destination:ServerlessPlatformDemoAPIGatewayLogs',\n        FilterPattern: '', // TODO: Make this only get what we want!\n        LogGroupName: {\n          'Fn::Sub': [\n            'API-Gateway-Execution-Logs_${ApiGatewayId}/${StageName}',\n            {\n              ApiGatewayId: { Ref: 'ApiGatewayRestApi' },\n              StageName: {\n                Ref: `ApiGatewayStage${upperFirst(deployment.Properties.StageName)}`\n              }\n            }\n          ]\n        }\n      }\n    }\n\n    template.Resources[deploymentKey] = deployment\n    delete template.Resources[deploymentKey].Properties.StageName\n  }\n}\n"],"file":"awsApiGatewayLogsCollection.js"}