{"version":3,"sources":["../../src/lib/awsLambdaLogsCollection.js"],"names":["ctx","sls","service","custom","enterprise","collectLambdaLogs","cli","log","template","provider","compiledCloudFormationTemplate","lambdaLogGroups","length","tenant","accessKey","request","Account","destinationOpts","appUid","tenantUid","serviceName","getServiceName","stageName","getStage","regionName","getRegion","accountId","destinationArn","message","includes","Error","lambdaLogGroupIndex","lambdaLogGroupKey","key","Resources","Type","Properties","DestinationArn","FilterPattern","LogGroupName","Ref"],"mappings":";;;;;;;AAOA;;AAEA;;;;;;;;;;;0BAEe,iBAAOA,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEXA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,IACAH,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UADvB,IAEAJ,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UAAvB,CAAkCC,iBAAlC,KAAwD,KAJ7C;AAAA;AAAA;AAAA;;AAMXL,YAAAA,GAAG,CAACC,GAAJ,CAAQK,GAAR,CAAYC,GAAZ,CACE,iEADF,EAEE,uBAFF;AANW;;AAAA;AAaPC,YAAAA,QAbO,GAaIR,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBO,QAAhB,CAAyBC,8BAb7B,EAeb;;AACMC,YAAAA,eAhBO,GAgBW,6BAAiBH,QAAjB,EAA2B,qBAA3B,CAhBX;;AAAA,kBAiBTG,eAAe,CAACC,MAAhB,IAA0B,CAjBjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAqBW,wCAAsBZ,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBW,MAAtC,CArBX;;AAAA;AAqBPC,YAAAA,SArBO;AAAA;AAAA,mBAsBad,GAAG,CAACS,QAAJ,CAAaM,OAAb,CAAqB,KAArB,EAA4B,mBAA5B,EAAiD,EAAjD,CAtBb;;AAAA;AAAA;AAsBLC,YAAAA,OAtBK,SAsBLA,OAtBK;AAuBPC,YAAAA,eAvBO,GAuBW;AACtBH,cAAAA,SADsB;AAEtBI,cAAAA,MAAM,EAAElB,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBgB,MAFF;AAGtBC,cAAAA,SAAS,EAAEnB,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBiB,SAHL;AAItBC,cAAAA,WAAW,EAAEpB,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBmB,cAAhB,EAJS;AAKtBC,cAAAA,SAAS,EAAEtB,GAAG,CAACS,QAAJ,CAAac,QAAb,EALW;AAMtBC,cAAAA,UAAU,EAAExB,GAAG,CAACS,QAAJ,CAAagB,SAAb,EANU;AAOtBC,cAAAA,SAAS,EAAEV;AAPW,aAvBX;AAAA;AAoCX;AApCW;AAAA,mBAoCkB,oCAAkBC,eAAlB,CApClB;;AAAA;AAAA;AAoCPU,YAAAA,cApCO,SAoCPA,cApCO;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAsCP,YAAEC,OAAF,IAAa,YAAEA,OAAF,CAAUC,QAAV,CAAmB,yBAAnB,CAtCN;AAAA;AAAA;AAAA;;AAuCT7B,YAAAA,GAAG,CAACC,GAAJ,CAAQK,GAAR,CAAYC,GAAZ,CACG,sDAAqDP,GAAG,CAACS,QAAJ,CAAagB,SAAb,EAAyB,EADjF;AAvCS;;AAAA;AAAA,kBA4CL,IAAIK,KAAJ,CAAU,YAAEF,OAAZ,CA5CK;;AAAA;AA+Cb;AACA,iBAAWG,mBAAX,IAAkCpB,eAAlC,EAAmD;AAC3CqB,cAAAA,iBAD2C,GACvBrB,eAAe,CAACoB,mBAAD,CAAf,CAAqCE,GADd;AAGjDzB,cAAAA,QAAQ,CAAC0B,SAAT,CAAoB,mCAAkC,uBAAWF,iBAAX,CAA8B,EAApF,IAAyF;AACvFG,gBAAAA,IAAI,EAAE,+BADiF;AAEvFC,gBAAAA,UAAU,EAAE;AACVC,kBAAAA,cAAc,EAAEV,cADN;AAEVW,kBAAAA,aAAa,EAAE,gDAFL;AAGVC,kBAAAA,YAAY,EAAE;AACZC,oBAAAA,GAAG,EAAER;AADO;AAHJ;AAF2E,eAAzF;AAUD;;AA7DY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/*\n * Lambda Logs Collection\n * - Collects `SERVERLESS PLATFORM |||` from lambda logs\n * - Optionally collects all logs (defaults to always for now)\n * - Capturing billing details (?)\n */\n\nimport { pickResourceType, upperFirst } from './utils'\n\nimport { getAccessKeyForTenant, getLogDestination } from '@serverless/platform-sdk'\n\nexport default async (ctx) => {\n  if (\n    ctx.sls.service.custom &&\n    ctx.sls.service.custom.enterprise &&\n    ctx.sls.service.custom.enterprise.collectLambdaLogs === false\n  ) {\n    ctx.sls.cli.log(\n      'Info: This plugin is not configured to collect AWS Lambda Logs.',\n      'Serverless Enterprise'\n    )\n    return\n  }\n\n  const template = ctx.sls.service.provider.compiledCloudFormationTemplate\n\n  // Gather possible targets\n  const lambdaLogGroups = pickResourceType(template, 'AWS::Logs::LogGroup')\n  if (lambdaLogGroups.length == 0) {\n    return\n  }\n\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant)\n  const { Account } = await ctx.provider.request('STS', 'getCallerIdentity', {})\n  const destinationOpts = {\n    accessKey,\n    appUid: ctx.sls.service.appUid,\n    tenantUid: ctx.sls.service.tenantUid,\n    serviceName: ctx.sls.service.getServiceName(),\n    stageName: ctx.provider.getStage(),\n    regionName: ctx.provider.getRegion(),\n    accountId: Account\n  }\n\n  let destinationArn\n\n  try {\n    ;({ destinationArn } = await getLogDestination(destinationOpts))\n  } catch (e) {\n    if (e.message && e.message.includes('not supported in region')) {\n      ctx.sls.cli.log(\n        `Warning: Lambda log collection is not supported in ${ctx.provider.getRegion()}`\n      )\n      return\n    }\n    throw new Error(e.message)\n  }\n\n  // For each log group, set up subscription\n  for (const lambdaLogGroupIndex in lambdaLogGroups) {\n    const lambdaLogGroupKey = lambdaLogGroups[lambdaLogGroupIndex].key\n\n    template.Resources[`CloudWatchLogsSubscriptionFilter${upperFirst(lambdaLogGroupKey)}`] = {\n      Type: 'AWS::Logs::SubscriptionFilter',\n      Properties: {\n        DestinationArn: destinationArn,\n        FilterPattern: '?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"',\n        LogGroupName: {\n          Ref: lambdaLogGroupKey\n        }\n      }\n    }\n  }\n}\n"],"file":"awsLambdaLogsCollection.js"}