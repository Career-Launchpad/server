{"version":3,"sources":["../../src/lib/plugin.js"],"names":["ServerlessEnterprisePlugin","sls","user","currentCommand","processedInput","commands","hooks","cli","log","missing","service","tenant","push","app","process","env","SERVERLESS_ACCESS_KEY","includes","errorMessage","console","Error","length","map","opt","join","enterpriseEnabled","state","secretsUsed","Set","provider","getProvider","login","usage","lifecycleEvents","enterprise","logout","options","type","Object","keys","eventDict","shortcut","required","body","test","dashboard","route","bind","hook","self","assign","errorHandler","chalk","yellow","appUid","tenantUid"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport { configureFetchDefaults, getLoggedInUser, openBrowser } from '@serverless/platform-sdk'\nimport errorHandler from './errorHandler'\n// import awsApiGatewayLogsCollection from './awsApiGatewayLogsCollection'\nimport awsLambdaLogsCollection from './awsLambdaLogsCollection'\nimport login from './login'\nimport logout from './logout'\nimport wrap from './wrap'\nimport injectLogsIamRole from './injectLogsIamRole'\nimport wrapClean from './wrapClean'\nimport runPolicies from './safeguards'\nimport getCredentials from './credentials'\nimport getAppUids from './appUids'\nimport removeDestination from './removeDestination'\nimport { saveDeployment } from './deployment'\nimport { hookIntoVariableGetter } from './variables'\nimport { generate, eventDict } from './generateEvent'\nimport { configureDeployProfile } from './deployProfile'\nimport { test } from './test'\nimport { getDashboardUrl } from './dashboard'\n\n/*\n * Serverless Enterprise Plugin\n */\n\nclass ServerlessEnterprisePlugin {\n  constructor(sls) {\n    this.sls = sls\n\n    configureFetchDefaults()\n    const user = getLoggedInUser()\n    const currentCommand = sls.processedInput.commands[0]\n\n    // default hook, only applies if user isn't using SFE. gets overridden if they are\n    this.hooks = {\n      'after:aws:deploy:finalize:cleanup': () =>\n        sls.cli.log(\n          'Run `serverless login` and deploy again to explore, monitor, secure your serverless project for free.',\n          'Serverless Enterprise'\n        )\n    }\n\n    // Check if Enterprise is configured\n    const missing = []\n    if (!sls.service.tenant) {\n      missing.push('tenant')\n    }\n    if (!sls.service.app) {\n      missing.push('app')\n    }\n    if (!sls.service.service) {\n      missing.push('service')\n    }\n\n    // Skip everything if user is not logged in and not trying to log in or out...\n    if (\n      !user &&\n      (currentCommand !== 'login' &&\n        currentCommand !== 'logout' &&\n        !process.env.SERVERLESS_ACCESS_KEY)\n    ) {\n      if (missing.includes('tenant') && missing.includes('app')) {\n        return // user isn't trying to use SFE\n      }\n      const errorMessage = `You are not currently logged in. To log in, use: $ serverless login`\n        console.log('') // eslint-disable-line\n        sls.cli.log(errorMessage, 'Serverless Enterprise') // eslint-disable-line\n        throw new Error(errorMessage) // eslint-disable-line\n    }\n    if (currentCommand !== 'login' && currentCommand !== 'logout' && missing.length > 0) {\n      sls.cli.log(\n        `Warning: The Enterprise Plugin requires a ${missing\n          .map((opt) => `\"${opt}\"`)\n          .join(', ')} property in your \"serverless.yml\" and will not work without it.`,\n        'Serverless Enterprise'\n      )\n      // replace the default hook with a message about configuring sls enterprise\n      this.hooks = {\n        'after:aws:deploy:finalize:cleanup': () =>\n          sls.cli.log(\n            `Update your \"serverless.yml\" with ${missing\n              .map((opt) => `\"${opt}\"`)\n              .join(\n                ', '\n              )} properties and deploy again to explore, monitor, secure your serverless project for free.`,\n            'Serverless Enterprise'\n          )\n      }\n      return\n    }\n\n    sls.enterpriseEnabled = true\n\n    // Defaults\n    this.state = {} // Useful for storing data across hooks\n    this.state.secretsUsed = new Set()\n    this.provider = this.sls.getProvider('aws')\n\n    // Add commands\n    this.commands = {\n      login: {\n        usage: 'Login or sign up for Serverless Enterprise',\n        lifecycleEvents: ['login'],\n        enterprise: true\n      },\n      logout: {\n        usage: 'Logout from Serverless Enterprise',\n        lifecycleEvents: ['logout'],\n        enterprise: true\n      },\n      'generate-event': {\n        usage: 'Generate event',\n        lifecycleEvents: ['generate-event'],\n        options: {\n          type: {\n            usage: `Specify event type. ${Object.keys(eventDict).join(', ')} are supported.`,\n            shortcut: 't',\n            required: true\n          },\n          body: {\n            usage: `Specify the body for the message, request, or stream event.`,\n            shortcut: 'b'\n          }\n        },\n        enterprise: true\n      },\n      test: {\n        usage: 'Run HTTP tests',\n        lifecycleEvents: ['test'],\n        options: {\n          ['function']: {\n            usage: `Specify the function to test`,\n            shortcut: 'f'\n          },\n          test: {\n            usage: `Specify a specific test to run`,\n            shortcut: 't'\n          }\n        },\n        enterprise: true\n      },\n      dashboard: {\n        usage: 'Open the Serverless Enterprise dashboard',\n        lifecycleEvents: ['dashboard'],\n        enterprise: true\n      }\n    }\n\n    // Set Plugin hooks for all Enteprise Plugin features here\n    this.hooks = {\n      'before:package:createDeploymentArtifacts': this.route('before:package:createDeploymentArtifacts').bind(this), // eslint-disable-line\n      'after:package:createDeploymentArtifacts': this.route('after:package:createDeploymentArtifacts').bind(this), // eslint-disable-line\n      'before:deploy:function:packageFunction': this.route('before:deploy:function:packageFunction').bind(this), // eslint-disable-line\n      'after:deploy:function:packageFunction': this.route('after:deploy:function:packageFunction').bind(this), // eslint-disable-line\n      'before:invoke:local:invoke': this.route('before:invoke:local:invoke').bind(this), // eslint-disable-line\n      'before:aws:package:finalize:saveServiceState': this.route('before:aws:package:finalize:saveServiceState').bind(this), // eslint-disable-line\n      'before:deploy:deploy': this.route('before:deploy:deploy').bind(this), // eslint-disable-line\n      'before:aws:deploy:deploy:createStack': this.route('before:aws:deploy:deploy:createStack').bind(this), // eslint-disable-line\n      'after:aws:deploy:finalize:cleanup': this.route('after:aws:deploy:finalize:cleanup').bind(this), // eslint-disable-line\n      'after:deploy:finalize': this.route('after:deploy:finalize').bind(this), // eslint-disable-line\n      'after:deploy:deploy': this.route('after:deploy:deploy').bind(this), // eslint-disable-line\n      'before:info:info': this.route('before:info:info').bind(this), // eslint-disable-line\n      'after:info:info': this.route('after:info:info').bind(this), // eslint-disable-line\n      'before:logs:logs': this.route('before:logs:logs').bind(this), // eslint-disable-line\n      'before:metrics:metrics': this.route('before:metrics:metrics').bind(this), // eslint-disable-line\n      'before:remove:remove': this.route('before:remove:remove').bind(this), // eslint-disable-line\n      'after:remove:remove': this.route('after:remove:remove').bind(this), // eslint-disable-line\n      'after:invoke:local:invoke': this.route('after:invoke:local:invoke').bind(this), // eslint-disable-line\n      'before:offline:start:init': this.route('before:offline:start:init').bind(this), // eslint-disable-line\n      'before:step-functions-offline:start': this.route('before:step-functions-offline:start').bind(this), // eslint-disable-line\n      'login:login': this.route('login:login').bind(this), // eslint-disable-line\n      'logout:logout': this.route('logout:logout').bind(this), // eslint-disable-line\n      'generate-event:generate-event': this.route('generate-event:generate-event').bind(this), // eslint-disable-line\n      'test:test': this.route('test:test').bind(this), // eslint-disable-line\n      'dashboard:dashboard': this.route('dashboard:dashboard').bind(this), // eslint-disable-line\n    }\n  }\n\n  /*\n   * Route\n   */\n\n  route(hook) {\n    const self = this\n    return async () => {\n      switch (hook) {\n        case 'before:package:createDeploymentArtifacts':\n          Object.assign(\n            self.sls.service,\n            await getAppUids(self.sls.service.tenant, self.sls.service.app)\n          )\n          await wrap(self)\n          await injectLogsIamRole(self)\n          break\n        case 'after:package:createDeploymentArtifacts':\n          await wrapClean(self)\n          break\n        case 'before:deploy:function:packageFunction':\n          await wrap(self)\n          break\n        case 'after:deploy:function:packageFunction':\n          await wrapClean(self)\n          break\n        case 'before:aws:package:finalize:saveServiceState':\n          await getCredentials(self)\n          // await awsApiGatewayLogsCollection(self)\n          await awsLambdaLogsCollection(self)\n          break\n        case 'before:deploy:deploy':\n          this.enterprise = {\n            errorHandler: errorHandler(this) // V.1 calls this when it crashes\n          }\n          await runPolicies(self)\n          break\n        case 'before:aws:deploy:deploy:createStack':\n          break\n        case 'after:aws:deploy:finalize:cleanup':\n          await saveDeployment(self)\n          break\n        case 'before:info:info':\n          await getCredentials(self)\n          break\n        case 'after:info:info':\n          // eslint-disable-next-line no-console\n          console.log(\n            chalk.yellow(\n              `Run \"serverless dashboard\" to open the dashboard or visit ${getDashboardUrl(self)}`\n            )\n          )\n          break\n        case 'dashboard:dashboard':\n          openBrowser(getDashboardUrl(self))\n          break\n        case 'before:logs:logs':\n          await getCredentials(self)\n          break\n        case 'before:metrics:metrics':\n          await getCredentials(self)\n          break\n        case 'before:remove:remove':\n          await getCredentials(self)\n          break\n        case 'after:remove:remove':\n          Object.assign(\n            self.sls.service,\n            await getAppUids(self.sls.service.tenant, self.sls.service.app)\n          )\n          await removeDestination(self)\n          await saveDeployment(self, true)\n          break\n        case 'before:invoke:local:invoke':\n          Object.assign(self.sls.service, {\n            appUid: '000000000000000000',\n            tenantUid: '000000000000000000'\n          })\n          await wrap(self)\n          break\n        case 'after:invoke:local:invoke':\n          await wrapClean(self)\n          break\n        case 'before:offline:start:init':\n          // await wrap(self)\n          break\n        case 'before:step-functions-offline:start':\n          // await wrap(self)\n          break\n        case 'login:login':\n          await login(self)\n          break\n        case 'logout:logout':\n          await logout(self)\n          break\n        case 'generate-event:generate-event':\n          await generate(self)\n          break\n        case 'test:test':\n          await test(self)\n          break\n      }\n    }\n  }\n\n  async asyncInit() {\n    if (\n      !this.sls.enterpriseEnabled ||\n      this.sls.processedInput.commands[0] === 'login' ||\n      this.sls.processedInput.commands[0] === 'logout'\n    ) {\n      hookIntoVariableGetter(this, {})\n      return\n    }\n\n    await configureDeployProfile(this)\n  }\n}\n\nexport default ServerlessEnterprisePlugin\n"],"file":"plugin.js"}