"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _platformSdk = require("@serverless/platform-sdk");

var _errorHandler = _interopRequireDefault(require("./errorHandler"));

var _awsLambdaLogsCollection = _interopRequireDefault(require("./awsLambdaLogsCollection"));

var _login = _interopRequireDefault(require("./login"));

var _logout = _interopRequireDefault(require("./logout"));

var _wrap = _interopRequireDefault(require("./wrap"));

var _injectLogsIamRole = _interopRequireDefault(require("./injectLogsIamRole"));

var _wrapClean = _interopRequireDefault(require("./wrapClean"));

var _safeguards = _interopRequireDefault(require("./safeguards"));

var _credentials = _interopRequireDefault(require("./credentials"));

var _appUids = _interopRequireDefault(require("./appUids"));

var _removeDestination = _interopRequireDefault(require("./removeDestination"));

var _deployment = require("./deployment");

var _variables = require("./variables");

var _generateEvent = require("./generateEvent");

var _deployProfile = require("./deployProfile");

var _test = require("./test");

var _dashboard = require("./dashboard");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/*
 * Serverless Enterprise Plugin
 */
var ServerlessEnterprisePlugin =
/*#__PURE__*/
function () {
  function ServerlessEnterprisePlugin(sls) {
    _classCallCheck(this, ServerlessEnterprisePlugin);

    this.sls = sls;
    (0, _platformSdk.configureFetchDefaults)();
    var user = (0, _platformSdk.getLoggedInUser)();
    var currentCommand = sls.processedInput.commands[0]; // default hook, only applies if user isn't using SFE. gets overridden if they are

    this.hooks = {
      'after:aws:deploy:finalize:cleanup': function afterAwsDeployFinalizeCleanup() {
        return sls.cli.log('Run `serverless login` and deploy again to explore, monitor, secure your serverless project for free.', 'Serverless Enterprise');
      } // Check if Enterprise is configured

    };
    var missing = [];

    if (!sls.service.tenant) {
      missing.push('tenant');
    }

    if (!sls.service.app) {
      missing.push('app');
    }

    if (!sls.service.service) {
      missing.push('service');
    } // Skip everything if user is not logged in and not trying to log in or out...


    if (!user && currentCommand !== 'login' && currentCommand !== 'logout' && !process.env.SERVERLESS_ACCESS_KEY) {
      if (missing.includes('tenant') && missing.includes('app')) {
        return; // user isn't trying to use SFE
      }

      var errorMessage = `You are not currently logged in. To log in, use: $ serverless login`;
      console.log(''); // eslint-disable-line

      sls.cli.log(errorMessage, 'Serverless Enterprise'); // eslint-disable-line

      throw new Error(errorMessage); // eslint-disable-line
    }

    if (currentCommand !== 'login' && currentCommand !== 'logout' && missing.length > 0) {
      sls.cli.log(`Warning: The Enterprise Plugin requires a ${missing.map(function (opt) {
        return `"${opt}"`;
      }).join(', ')} property in your "serverless.yml" and will not work without it.`, 'Serverless Enterprise'); // replace the default hook with a message about configuring sls enterprise

      this.hooks = {
        'after:aws:deploy:finalize:cleanup': function afterAwsDeployFinalizeCleanup() {
          return sls.cli.log(`Update your "serverless.yml" with ${missing.map(function (opt) {
            return `"${opt}"`;
          }).join(', ')} properties and deploy again to explore, monitor, secure your serverless project for free.`, 'Serverless Enterprise');
        }
      };
      return;
    }

    sls.enterpriseEnabled = true; // Defaults

    this.state = {}; // Useful for storing data across hooks

    this.state.secretsUsed = new Set();
    this.provider = this.sls.getProvider('aws'); // Add commands

    this.commands = {
      login: {
        usage: 'Login or sign up for Serverless Enterprise',
        lifecycleEvents: ['login'],
        enterprise: true
      },
      logout: {
        usage: 'Logout from Serverless Enterprise',
        lifecycleEvents: ['logout'],
        enterprise: true
      },
      'generate-event': {
        usage: 'Generate event',
        lifecycleEvents: ['generate-event'],
        options: {
          type: {
            usage: `Specify event type. ${Object.keys(_generateEvent.eventDict).join(', ')} are supported.`,
            shortcut: 't',
            required: true
          },
          body: {
            usage: `Specify the body for the message, request, or stream event.`,
            shortcut: 'b'
          }
        },
        enterprise: true
      },
      test: {
        usage: 'Run HTTP tests',
        lifecycleEvents: ['test'],
        options: {
          ['function']: {
            usage: `Specify the function to test`,
            shortcut: 'f'
          },
          test: {
            usage: `Specify a specific test to run`,
            shortcut: 't'
          }
        },
        enterprise: true
      },
      dashboard: {
        usage: 'Open the Serverless Enterprise dashboard',
        lifecycleEvents: ['dashboard'],
        enterprise: true
      } // Set Plugin hooks for all Enteprise Plugin features here

    };
    this.hooks = {
      'before:package:createDeploymentArtifacts': this.route('before:package:createDeploymentArtifacts').bind(this),
      // eslint-disable-line
      'after:package:createDeploymentArtifacts': this.route('after:package:createDeploymentArtifacts').bind(this),
      // eslint-disable-line
      'before:deploy:function:packageFunction': this.route('before:deploy:function:packageFunction').bind(this),
      // eslint-disable-line
      'after:deploy:function:packageFunction': this.route('after:deploy:function:packageFunction').bind(this),
      // eslint-disable-line
      'before:invoke:local:invoke': this.route('before:invoke:local:invoke').bind(this),
      // eslint-disable-line
      'before:aws:package:finalize:saveServiceState': this.route('before:aws:package:finalize:saveServiceState').bind(this),
      // eslint-disable-line
      'before:deploy:deploy': this.route('before:deploy:deploy').bind(this),
      // eslint-disable-line
      'before:aws:deploy:deploy:createStack': this.route('before:aws:deploy:deploy:createStack').bind(this),
      // eslint-disable-line
      'after:aws:deploy:finalize:cleanup': this.route('after:aws:deploy:finalize:cleanup').bind(this),
      // eslint-disable-line
      'after:deploy:finalize': this.route('after:deploy:finalize').bind(this),
      // eslint-disable-line
      'after:deploy:deploy': this.route('after:deploy:deploy').bind(this),
      // eslint-disable-line
      'before:info:info': this.route('before:info:info').bind(this),
      // eslint-disable-line
      'after:info:info': this.route('after:info:info').bind(this),
      // eslint-disable-line
      'before:logs:logs': this.route('before:logs:logs').bind(this),
      // eslint-disable-line
      'before:metrics:metrics': this.route('before:metrics:metrics').bind(this),
      // eslint-disable-line
      'before:remove:remove': this.route('before:remove:remove').bind(this),
      // eslint-disable-line
      'after:remove:remove': this.route('after:remove:remove').bind(this),
      // eslint-disable-line
      'after:invoke:local:invoke': this.route('after:invoke:local:invoke').bind(this),
      // eslint-disable-line
      'before:offline:start:init': this.route('before:offline:start:init').bind(this),
      // eslint-disable-line
      'before:step-functions-offline:start': this.route('before:step-functions-offline:start').bind(this),
      // eslint-disable-line
      'login:login': this.route('login:login').bind(this),
      // eslint-disable-line
      'logout:logout': this.route('logout:logout').bind(this),
      // eslint-disable-line
      'generate-event:generate-event': this.route('generate-event:generate-event').bind(this),
      // eslint-disable-line
      'test:test': this.route('test:test').bind(this),
      // eslint-disable-line
      'dashboard:dashboard': this.route('dashboard:dashboard').bind(this) // eslint-disable-line

    };
  }
  /*
   * Route
   */


  _createClass(ServerlessEnterprisePlugin, [{
    key: "route",
    value: function route(hook) {
      var _this = this;

      var self = this;
      return (
        /*#__PURE__*/
        _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.t0 = hook;
                  _context.next = _context.t0 === 'before:package:createDeploymentArtifacts' ? 3 : _context.t0 === 'after:package:createDeploymentArtifacts' ? 14 : _context.t0 === 'before:deploy:function:packageFunction' ? 17 : _context.t0 === 'after:deploy:function:packageFunction' ? 20 : _context.t0 === 'before:aws:package:finalize:saveServiceState' ? 23 : _context.t0 === 'before:deploy:deploy' ? 28 : _context.t0 === 'before:aws:deploy:deploy:createStack' ? 32 : _context.t0 === 'after:aws:deploy:finalize:cleanup' ? 33 : _context.t0 === 'before:info:info' ? 36 : _context.t0 === 'after:info:info' ? 39 : _context.t0 === 'dashboard:dashboard' ? 41 : _context.t0 === 'before:logs:logs' ? 43 : _context.t0 === 'before:metrics:metrics' ? 46 : _context.t0 === 'before:remove:remove' ? 49 : _context.t0 === 'after:remove:remove' ? 52 : _context.t0 === 'before:invoke:local:invoke' ? 63 : _context.t0 === 'after:invoke:local:invoke' ? 67 : _context.t0 === 'before:offline:start:init' ? 70 : _context.t0 === 'before:step-functions-offline:start' ? 71 : _context.t0 === 'login:login' ? 72 : _context.t0 === 'logout:logout' ? 75 : _context.t0 === 'generate-event:generate-event' ? 78 : _context.t0 === 'test:test' ? 81 : 84;
                  break;

                case 3:
                  _context.t1 = Object;
                  _context.t2 = self.sls.service;
                  _context.next = 7;
                  return (0, _appUids.default)(self.sls.service.tenant, self.sls.service.app);

                case 7:
                  _context.t3 = _context.sent;

                  _context.t1.assign.call(_context.t1, _context.t2, _context.t3);

                  _context.next = 11;
                  return (0, _wrap.default)(self);

                case 11:
                  _context.next = 13;
                  return (0, _injectLogsIamRole.default)(self);

                case 13:
                  return _context.abrupt("break", 84);

                case 14:
                  _context.next = 16;
                  return (0, _wrapClean.default)(self);

                case 16:
                  return _context.abrupt("break", 84);

                case 17:
                  _context.next = 19;
                  return (0, _wrap.default)(self);

                case 19:
                  return _context.abrupt("break", 84);

                case 20:
                  _context.next = 22;
                  return (0, _wrapClean.default)(self);

                case 22:
                  return _context.abrupt("break", 84);

                case 23:
                  _context.next = 25;
                  return (0, _credentials.default)(self);

                case 25:
                  _context.next = 27;
                  return (0, _awsLambdaLogsCollection.default)(self);

                case 27:
                  return _context.abrupt("break", 84);

                case 28:
                  _this.enterprise = {
                    errorHandler: (0, _errorHandler.default)(_this) // V.1 calls this when it crashes

                  };
                  _context.next = 31;
                  return (0, _safeguards.default)(self);

                case 31:
                  return _context.abrupt("break", 84);

                case 32:
                  return _context.abrupt("break", 84);

                case 33:
                  _context.next = 35;
                  return (0, _deployment.saveDeployment)(self);

                case 35:
                  return _context.abrupt("break", 84);

                case 36:
                  _context.next = 38;
                  return (0, _credentials.default)(self);

                case 38:
                  return _context.abrupt("break", 84);

                case 39:
                  // eslint-disable-next-line no-console
                  console.log(_chalk.default.yellow(`Run "serverless dashboard" to open the dashboard or visit ${(0, _dashboard.getDashboardUrl)(self)}`));
                  return _context.abrupt("break", 84);

                case 41:
                  (0, _platformSdk.openBrowser)((0, _dashboard.getDashboardUrl)(self));
                  return _context.abrupt("break", 84);

                case 43:
                  _context.next = 45;
                  return (0, _credentials.default)(self);

                case 45:
                  return _context.abrupt("break", 84);

                case 46:
                  _context.next = 48;
                  return (0, _credentials.default)(self);

                case 48:
                  return _context.abrupt("break", 84);

                case 49:
                  _context.next = 51;
                  return (0, _credentials.default)(self);

                case 51:
                  return _context.abrupt("break", 84);

                case 52:
                  _context.t4 = Object;
                  _context.t5 = self.sls.service;
                  _context.next = 56;
                  return (0, _appUids.default)(self.sls.service.tenant, self.sls.service.app);

                case 56:
                  _context.t6 = _context.sent;

                  _context.t4.assign.call(_context.t4, _context.t5, _context.t6);

                  _context.next = 60;
                  return (0, _removeDestination.default)(self);

                case 60:
                  _context.next = 62;
                  return (0, _deployment.saveDeployment)(self, true);

                case 62:
                  return _context.abrupt("break", 84);

                case 63:
                  Object.assign(self.sls.service, {
                    appUid: '000000000000000000',
                    tenantUid: '000000000000000000'
                  });
                  _context.next = 66;
                  return (0, _wrap.default)(self);

                case 66:
                  return _context.abrupt("break", 84);

                case 67:
                  _context.next = 69;
                  return (0, _wrapClean.default)(self);

                case 69:
                  return _context.abrupt("break", 84);

                case 70:
                  return _context.abrupt("break", 84);

                case 71:
                  return _context.abrupt("break", 84);

                case 72:
                  _context.next = 74;
                  return (0, _login.default)(self);

                case 74:
                  return _context.abrupt("break", 84);

                case 75:
                  _context.next = 77;
                  return (0, _logout.default)(self);

                case 77:
                  return _context.abrupt("break", 84);

                case 78:
                  _context.next = 80;
                  return (0, _generateEvent.generate)(self);

                case 80:
                  return _context.abrupt("break", 84);

                case 81:
                  _context.next = 83;
                  return (0, _test.test)(self);

                case 83:
                  return _context.abrupt("break", 84);

                case 84:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))
      );
    }
  }, {
    key: "asyncInit",
    value: function () {
      var _asyncInit = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!this.sls.enterpriseEnabled || this.sls.processedInput.commands[0] === 'login' || this.sls.processedInput.commands[0] === 'logout')) {
                  _context2.next = 3;
                  break;
                }

                (0, _variables.hookIntoVariableGetter)(this, {});
                return _context2.abrupt("return");

              case 3:
                _context2.next = 5;
                return (0, _deployProfile.configureDeployProfile)(this);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function asyncInit() {
        return _asyncInit.apply(this, arguments);
      }

      return asyncInit;
    }()
  }]);

  return ServerlessEnterprisePlugin;
}();

var _default = ServerlessEnterprisePlugin;
exports.default = _default;
//# sourceMappingURL=plugin.js.map