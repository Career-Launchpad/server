{"version":3,"sources":["../../src/lib/errorHandler.js"],"names":["ctx","error","id","sls","cli","log","deployment","save","result","dashboardUrl","state","complete"],"mappings":";;;;;;;AAIA;;AACA;;;;;;;;AAEe,kBAASA,GAAT,EAAc;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAO,iBAAeC,KAAf,EAAsBC,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;;AACjC;;;;AAKAF,gBAAAA,GAAG,CAACG,GAAJ,CAAQC,GAAR,CAAYC,GAAZ,CAAgB,mDAAhB,EAAqE,uBAArE;AANK;AAAA,uBAQoB,qCAAoBL,GAApB,EAAyB,OAAzB,EAAkC,6BAAeC,KAAf,CAAlC,CARpB;;AAAA;AAQCK,gBAAAA,UARD;AAAA;AAAA,uBAUgBA,UAAU,CAACC,IAAX,EAVhB;;AAAA;AAUCC,gBAAAA,MAVD;AAYLR,gBAAAA,GAAG,CAACG,GAAJ,CAAQC,GAAR,CAAYC,GAAZ,CACG,oEAAmEG,MAAM,CAACC,YAAa,EAD1F,EAC6F;AAC3F,uCAFF;;AAIA,oBAAI,CAACT,GAAG,CAACU,KAAJ,CAAUJ,UAAf,EAA2B;AACzBN,kBAAAA,GAAG,CAACU,KAAJ,CAAUJ,UAAV,GAAuB,EAAvB;AACD;;AACDN,gBAAAA,GAAG,CAACU,KAAJ,CAAUJ,UAAV,CAAqBK,QAArB,GAAgC,IAAhC;;AAnBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBD","sourcesContent":["/*\n * Error Handler\n */\n\nimport serializeError from './serializeError'\nimport { parseDeploymentData } from './deployment'\n\nexport default function(ctx) {\n  return async function(error, id) { // eslint-disable-line\n    /*\n     * Error: Failed Deployment\n     * - Handle failed deployments\n     */\n\n    ctx.sls.cli.log('Publishing service to the Enterprise Dashboard...', 'Serverless Enterprise')\n\n    const deployment = await parseDeploymentData(ctx, 'error', serializeError(error))\n\n    const result = await deployment.save()\n\n    ctx.sls.cli.log(\n      `Successfully published your service to the Enterprise Dashboard: ${result.dashboardUrl}`, // eslint-disable-line\n      'Serverless Enterprise'\n    )\n    if (!ctx.state.deployment) {\n      ctx.state.deployment = {}\n    }\n    ctx.state.deployment.complete = true\n  }\n}\n"],"file":"errorHandler.js"}