"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _platformSdk = require("@serverless/platform-sdk");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _default(_x) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(ctx) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            ctx.sls.cli.log('Logging you in via your default browser...', 'Serverless Enterprise'); // Include a "tenant" in "login()"...
            // This will create a new accessKey for that tenant on every login.

            _context.prev = 1;
            _context.next = 4;
            return (0, _platformSdk.login)(ctx.sls.service.tenant);

          case 4:
            _context.next = 9;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](1);

            if (_context.t0 === 'Complete sign-up before logging in.') {
              ctx.sls.cli.log("Please complete sign-up at dashboard.serverless.com, configure your service with the tenant and application (documentation - https://git.io/fjl3F) and run 'serverless login' again", 'Serverless Enterprise');
              process.exit(1);
            }

          case 9:
            ctx.sls.cli.log('You sucessfully logged in to Serverless Enterprise.', 'Serverless Enterprise');

            if (!ctx.sls.service.tenant || !ctx.sls.service.app) {
              ctx.sls.cli.log("Please configure your service with the tenant and application (documentation - https://git.io/fjl3F) and run 'serverless login' again", 'Serverless Enterprise');
            }

            process.exit(0);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 6]]);
  }));
  return _ref.apply(this, arguments);
}
//# sourceMappingURL=login.js.map