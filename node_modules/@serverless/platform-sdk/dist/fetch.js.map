{"version":3,"sources":["../src/fetch.js"],"names":["configureFetchDefaults","agent","headers","ca","process","env","HTTPS_CA","https_ca","caCerts","caArr","split","concat","map","cert","replace","cafile","HTTPS_CAFILE","https_cafile","caPathArr","cafilePath","fs","readFileSync","trim","length","caOptions","rejectUnauthorized","https","Agent","currentVersion","url","options","response"],"mappings":";;;;;QASgBA,sB,GAAAA,sB;;AAThB;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAIC,cAAJ;AACA,IAAIC,gBAAJ;;AAEO,SAASF,sBAAT,GAAkC;AACvC,MAAMG,KAAKC,QAAQC,GAAR,CAAYF,EAAZ,IAAkBC,QAAQC,GAAR,CAAYC,QAA9B,IAA0CF,QAAQC,GAAR,CAAYE,QAAjE;;AAEA,MAAIC,UAAU,EAAd;;AAEA,MAAIL,EAAJ,EAAQ;AACN;AACA,QAAMM,QAAQN,GAAGO,KAAH,CAAS,GAAT,CAAd;AACA;AACAF,cAAUA,QAAQG,MAAR,CAAeF,MAAMG,GAAN,CAAU,UAACC,IAAD;AAAA,aAAUA,KAAKC,OAAL,CAAa,MAAb,EAAqB,IAArB,CAAV;AAAA,KAAV,CAAf,CAAV;AACD;;AAED,MAAMC,SAASX,QAAQC,GAAR,CAAYU,MAAZ,IAAsBX,QAAQC,GAAR,CAAYW,YAAlC,IAAkDZ,QAAQC,GAAR,CAAYY,YAA7E;;AAEA,MAAIF,MAAJ,EAAY;AACV;AACA,QAAMG,YAAYH,OAAOL,KAAP,CAAa,GAAb,CAAlB;AACAF,cAAUA,QAAQG,MAAR,CAAeO,UAAUN,GAAV,CAAc,UAACO,UAAD;AAAA,aAAgBC,aAAGC,YAAH,CAAgBF,WAAWG,IAAX,EAAhB,CAAhB;AAAA,KAAd,CAAf,CAAV;AACD;;AAED,MAAId,QAAQe,MAAR,GAAiB,CAArB,EAAwB;AACtB,QAAMC,YAAY;AAChBC,0BAAoB,IADJ;AAEhBtB,UAAIK;AAEN;AAJkB,KAAlB,CAKAP,QAAQ,IAAIyB,gBAAMC,KAAV,CAAgBH,SAAhB,CAAR;AACD;;AAEDtB,YAAU;AACR,oBAAgB,kBADR;AAER,0BAAsB0B;AAFd,GAAV;AAID;;;qEAEc,iBAAOC,GAAP;AAAA,QAAYC,OAAZ,uEAAsB,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACU,+BAAMD,GAAN;AACrB5B;AADqB,eAElB6B,OAFkB;AAGrB5B,yCACKA,OADL,EAEM4B,QAAQ5B,OAAR,IAAmB,EAFzB;AAHqB,eADV;;AAAA;AACP6B,oBADO;AAAA;AAAA,mBASP,8BAAkBA,QAAlB,CATO;;AAAA;AAAA,6CAUNA,QAVM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"fetch.js","sourcesContent":["import fs from 'fs'\nimport https from 'https'\nimport fetch from 'isomorphic-fetch'\nimport { checkHttpResponse } from './utils'\nimport { version as currentVersion } from '../package.json'\n\nlet agent\nlet headers\n\nexport function configureFetchDefaults() {\n  const ca = process.env.ca || process.env.HTTPS_CA || process.env.https_ca\n\n  let caCerts = []\n\n  if (ca) {\n    // Can be a single certificate or multiple, comma separated.\n    const caArr = ca.split(',')\n    // Replace the newline -- https://stackoverflow.com/questions/30400341\n    caCerts = caCerts.concat(caArr.map((cert) => cert.replace(/\\\\n/g, '\\n')))\n  }\n\n  const cafile = process.env.cafile || process.env.HTTPS_CAFILE || process.env.https_cafile\n\n  if (cafile) {\n    // Can be a single certificate file path or multiple paths, comma separated.\n    const caPathArr = cafile.split(',')\n    caCerts = caCerts.concat(caPathArr.map((cafilePath) => fs.readFileSync(cafilePath.trim())))\n  }\n\n  if (caCerts.length > 0) {\n    const caOptions = {\n      rejectUnauthorized: true,\n      ca: caCerts\n    }\n    // Update the agent -- http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-registering-certs.html\n    agent = new https.Agent(caOptions)\n  }\n\n  headers = {\n    'Content-Type': 'application/json',\n    'x-platform-version': currentVersion\n  }\n}\n\nexport default async (url, options = {}) => {\n  const response = await fetch(url, {\n    agent,\n    ...options,\n    headers: {\n      ...headers,\n      ...(options.headers || {})\n    }\n  })\n  await checkHttpResponse(response)\n  return response\n}\n"]}